10010000000000000000000000001100 //Jump to constant address 6
10010000000000000001101110001000 //Jump to constant address 3524
10010000000000000001101110110110 //Jump to constant address 3547
10010000000000000001101111100100 //Jump to constant address 3570
10010000000000000001110000010010 //Jump to constant address 3593
00000000000000000000111000110001 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001100011100110 //Jump to constant address 3187
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001001 //data
00000000000000000000000001000011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000000000 //data
00000000000000000000000001000101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001101000 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101111 //data
00000000000000000000000001001001 //data
00000000000000000000000001001110 //data
00000000000000000000000001000100 //data
00000000000000000000000001000101 //data
00000000000000000000000001011000 //data
00000000000000000000000000101110 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001001101 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101111 //data
00000000000000000000000001001001 //data
00000000000000000000000001001110 //data
00000000000000000000000001000100 //data
00000000000000000000000001000101 //data
00000000000000000000000001011000 //data
00000000000000000000000000101110 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001001101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001101000 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000000000 //data
00000000000000000000000001000110 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001111010 //data
00000000000000000000000001100101 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000000000 //data
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000010011111110 //Jump to constant address 639
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010100010100 //Jump to constant address 650
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000000001 //Set r1 to 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000010100100010 //Jump to constant address 657
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010100111100 //Jump to constant address 670
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
10010000000000000000010100010110 //Jump to constant address 651
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000010101011100 //Jump to constant address 686
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010101110010 //Jump to constant address 697
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000010110000000 //Jump to constant address 704
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010110010010 //Jump to constant address 713
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
10010000000000000000010101110100 //Jump to constant address 698
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000010 //Set r2 to 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000000000000000000000000111101 //Compute r0 OR r3 and write result to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000010110110110 //Jump to constant address 731
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010111110110 //Jump to constant address 763
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11100000000000000000000100001000 //Read at address in r1 with offset 0 to r8
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000110000000 //Write value in r8 to address in r1 with offset 0
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
10010000000000000000010110101010 //Jump to constant address 725
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000000100 //Set r4 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000011000111100 //Jump to constant address 798
01110000000000000000000000000100 //Set r4 to 0
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000011001011000 //Jump to constant address 812
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
10010000000000000000011000101110 //Jump to constant address 791
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000001100001111000000000001 //Set r1 to 783
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001100001111000000000001 //Set r1 to 783
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001001000011000000000101 //Set r5 to 579
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000001111001010001 //Write value in r5 to address in rbp with offset -1
11010000000000000010111001000001 //Write value in r4 to address in rbp with offset -2
01110000001010100100000000000001 //Set r1 to 676
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
01110000000000001010000000000100 //Set r4 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000011111000010001 //Write value in r1 to address in rbp with offset -3
01110000000000000000000000001100 //Set r12 to 0
11010000000000000100111011000001 //Write value in r12 to address in rbp with offset -4
01110000001001110101000000000001 //Set r1 to 629
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
01110000000000001010000000000100 //Set r4 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000001111000010001 //Write value in r1 to address in rbp with offset -1
01110000000000000001000000000001 //Set r1 to 1
11100000000000000001111000101100 //Read at address in rbp with offset -1 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000011011011100 //Jump to constant address 878
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000011100000000 //Jump to constant address 896
01110000001101001100000000000001 //Set r1 to 844
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
11100000000000000010111000100100 //Read at address in rbp with offset -2 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
11100000000000000011111000101100 //Read at address in rbp with offset -3 to r12
01110000000000110000000000001101 //Set r13 to 48
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000000000100111000100001 //Read at address in rbp with offset -4 to r1
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11010000000000000100111000110001 //Write value in r3 to address in rbp with offset -4
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000010111000101100 //Read at address in rbp with offset -2 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000000100111000100001 //Read at address in rbp with offset -4 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000101111100001111 //Compute rsp - 5 and write result to rsp
11010000000000000101111001000001 //Write value in r4 to address in rbp with offset -5
01110000001101001100000000000001 //Set r1 to 844
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000101111000100100 //Read at address in rbp with offset -5 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000101111000101100 //Read at address in rbp with offset -5 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001001111100001111 //Compute rsp - 9 and write result to rsp
11010000000000000110111001010001 //Write value in r5 to address in rbp with offset -6
11010000000000000111111001000001 //Write value in r4 to address in rbp with offset -7
01110000001010100100000000000001 //Set r1 to 676
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
01110000000000010000000000000100 //Set r4 to 16
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000001000111000010001 //Write value in r1 to address in rbp with offset -8
01110000000000000000000000001100 //Set r12 to 0
11010000000000001001111011000001 //Write value in r12 to address in rbp with offset -9
01110000001001110101000000000001 //Set r1 to 629
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
01110000000000010000000000000100 //Set r4 to 16
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000110111000010001 //Write value in r1 to address in rbp with offset -6
01110000000000000001000000000001 //Set r1 to 1
11100000000000000110111000101100 //Read at address in rbp with offset -6 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000011110110110 //Jump to constant address 987
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000011111011010 //Jump to constant address 1005
01110000001110111001000000000001 //Set r1 to 953
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
11100000000000000111111000100100 //Read at address in rbp with offset -7 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001001111000101100 //Read at address in rbp with offset -9 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001001111000010001 //Write value in r1 to address in rbp with offset -9
01110000000000000001000000000001 //Set r1 to 1
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000000001001000000001101 //Set r13 to 9
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000011111100110 //Jump to constant address 1011
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100000000000 //Jump to constant address 1024
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000001000001000000001101 //Set r13 to 65
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000001010000000001101 //Set r13 to 10
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
10010000000000000000100000001000 //Jump to constant address 1028
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000000110000000000001101 //Set r13 to 48
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000000001001111000100001 //Read at address in rbp with offset -9 to r1
11100000000000001001111000101100 //Read at address in rbp with offset -9 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11010000000000001001111000110001 //Write value in r3 to address in rbp with offset -9
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000111111000101100 //Read at address in rbp with offset -7 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000001001111000100001 //Read at address in rbp with offset -9 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001010111100001111 //Compute rsp - 10 and write result to rsp
11010000000000001010111001000001 //Write value in r4 to address in rbp with offset -10
01110000000000000000000000001100 //Set r12 to 0
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000110000000000001100 //Set r12 to 48
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000000000000001000000001100 //Set r12 to 1
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000001111000000000001100 //Set r12 to 120
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000000000000010000000001100 //Set r12 to 2
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001010111000010001 //Write value in r1 to address in rbp with offset -10
01110000001110111001000000000001 //Set r1 to 953
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000001010111000100100 //Read at address in rbp with offset -10 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
01110000000001001100000100000011 //Set highest 16 bits of r3 to 76
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110010011000100110000000000001 //Set r1 to 9766
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
01110010011000100111000000000001 //Set r1 to 9767
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000100011100100 //Jump to constant address 1138
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100011101110 //Jump to constant address 1143
10010000000000000000100011010100 //Jump to constant address 1130
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000110001000000000001 //Set r1 to 9777
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001011111100001111 //Compute rsp - 11 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100110001010 //Jump to constant address 1221
01110010011000100100000000000001 //Set r1 to 9764
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
10010000000000000000100101111000 //Jump to constant address 1212
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000100010000000000101 //Set r5 to 34
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001011000000000000001 //Set r1 to 1112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000001011111000010001 //Write value in r1 to address in rbp with offset -11
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001011111000100001 //Read at address in rbp with offset -11 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001100111100001111 //Compute rsp - 12 and write result to rsp
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000100010000000000101 //Set r5 to 34
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000001100111000010001 //Write value in r1 to address in rbp with offset -12
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001100111000100001 //Read at address in rbp with offset -12 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001101111100001111 //Compute rsp - 13 and write result to rsp
11010000000000001101111001010001 //Write value in r5 to address in rbp with offset -13
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000101001110010 //Jump to constant address 1337
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101010011010 //Jump to constant address 1357
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000001101111000101100 //Read at address in rbp with offset -13 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001101111000010001 //Write value in r1 to address in rbp with offset -13
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
10010000000000000000101001100100 //Jump to constant address 1330
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010000111100001111 //Compute rsp - 16 and write result to rsp
11010000000000001110111001010001 //Write value in r5 to address in rbp with offset -14
11010000000000001111111001000001 //Write value in r4 to address in rbp with offset -15
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
01110000000000000000000000001100 //Set r12 to 0
11010000000000010000111011000001 //Write value in r12 to address in rbp with offset -16
01110000000000000001000000000001 //Set r1 to 1
11100000000000010000111000101100 //Read at address in rbp with offset -16 to r12
11100000000000001111111000101101 //Read at address in rbp with offset -15 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000101011000110 //Jump to constant address 1379
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101011111010 //Jump to constant address 1405
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000001110111000101100 //Read at address in rbp with offset -14 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001110111000010001 //Write value in r1 to address in rbp with offset -14
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
11100000000000010000111000100001 //Read at address in rbp with offset -16 to r1
11100000000000010000111000101100 //Read at address in rbp with offset -16 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000010000111000010001 //Write value in r1 to address in rbp with offset -16
10010000000000000000101010111010 //Jump to constant address 1373
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011011111100001111 //Compute rsp - 27 and write result to rsp
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001011000000000000001 //Set r1 to 1112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000011011111000010001 //Write value in r1 to address in rbp with offset -27
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010000011011000000000001 //Set r1 to 1051
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000011010111000000100 //Compute rbp - 26 and write result to r4
11100000000000011011111000100101 //Read at address in rbp with offset -27 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001100001111000000000001 //Set r1 to 783
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000011010111000000101 //Compute rbp - 26 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001100110010000000000001 //Set r1 to 818
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000010010000000000101 //Set r5 to 530
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011101111100001111 //Compute rsp - 29 and write result to rsp
11010000000000011100111001010001 //Write value in r5 to address in rbp with offset -28
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010101000000000101 //Set r5 to 21
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001011000000000000001 //Set r1 to 1112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011100111000100101 //Read at address in rbp with offset -28 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001011000000000000001 //Set r1 to 1112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000011101111000010001 //Write value in r1 to address in rbp with offset -29
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001011000000000000001 //Set r1 to 1112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000011101111000100001 //Read at address in rbp with offset -29 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001011000000000000001 //Set r1 to 1112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111100000000000101 //Set r5 to 60
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000101000000000101 //Set r5 to 5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001011000000000000001 //Set r1 to 1112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001100100000000000101 //Set r5 to 100
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010111001110000000000001 //Set r1 to 1486
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000101000000000101 //Set r5 to 5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110011101000 //Jump to constant address 1652
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110100000000 //Jump to constant address 1664
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000000110100001110 //Jump to constant address 1671
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110100111100 //Jump to constant address 1694
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110101000110 //Jump to constant address 1699
10010000000000000000110100100010 //Jump to constant address 1681
01110000010111001110000000000001 //Set r1 to 1486
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000111000000000101 //Set r5 to 7
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110101100010 //Jump to constant address 1713
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110101111000 //Jump to constant address 1724
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010111001110000000000001 //Set r1 to 1486
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000110000000000101 //Set r5 to 6
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110110010100 //Jump to constant address 1738
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110110101010 //Jump to constant address 1749
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110111000110 //Jump to constant address 1763
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110111010000 //Jump to constant address 1768
10010000000000000000110110101100 //Jump to constant address 1750
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110000000000000101 //Set r5 to 48
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000111000010110 //Jump to constant address 1803
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111000101100 //Jump to constant address 1814
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110001000000000101 //Set r5 to 49
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000111001110010 //Jump to constant address 1849
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111010001000 //Jump to constant address 1860
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011110111100001111 //Compute rsp - 30 and write result to rsp
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001100000000000101 //Set r5 to 12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001101000000000000101 //Set r5 to 104
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010000000000001101 //Set r13 to 16
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011000000000001101 //Set r13 to 24
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000011110111000100001 //Read at address in rbp with offset -30 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011111111100001111 //Compute rsp - 31 and write result to rsp
11010000000000011111111001010001 //Write value in r5 to address in rbp with offset -31
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111001000000000101 //Set r5 to 57
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000100101 //Read at address in rbp with offset -31 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000101100 //Read at address in rbp with offset -31 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000101100 //Read at address in rbp with offset -31 to r12
01110000000000010000000000001101 //Set r13 to 16
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000101100 //Read at address in rbp with offset -31 to r12
01110000000000011000000000001101 //Set r13 to 24
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000000000010 //Jump to constant address 2049
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000000011000 //Jump to constant address 2060
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000100101111100001111 //Compute rsp - 37 and write result to rsp
11010000000000100000111001010001 //Write value in r5 to address in rbp with offset -32
11010000000000100100111001000001 //Write value in r4 to address in rbp with offset -36
01110000000000000001000000000001 //Set r1 to 1
11100000000000100100111000101100 //Read at address in rbp with offset -36 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001000000111110 //Jump to constant address 2079
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000001010100 //Jump to constant address 2090
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111010000000000101 //Set r5 to 58
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100100111000100101 //Read at address in rbp with offset -36 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100100111000101100 //Read at address in rbp with offset -36 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011101000000001101 //Set r13 to 29
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000011000000 //Jump to constant address 2144
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000011010110 //Jump to constant address 2155
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
11010000000000100001111011000001 //Write value in r12 to address in rbp with offset -33
01110000000000000000000000001100 //Set r12 to 0
11010000000000100010111011000001 //Write value in r12 to address in rbp with offset -34
01110000000000000001000000000001 //Set r1 to 1
11100000000000100010111000101100 //Read at address in rbp with offset -34 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001000011101010 //Jump to constant address 2165
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001000010100 //Jump to constant address 2314
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000100111000000000101 //Set r5 to 39
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000100011111000010001 //Write value in r1 to address in rbp with offset -35
01110000000000000000000000001100 //Set r12 to 0
11010000000000100101111011000001 //Write value in r12 to address in rbp with offset -37
01110000000000000001000000000001 //Set r1 to 1
11100000000000100101111000101100 //Read at address in rbp with offset -37 to r12
11100000000000100011111000101101 //Read at address in rbp with offset -35 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001000100110010 //Jump to constant address 2201
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000101111000 //Jump to constant address 2236
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000100001111000100010 //Read at address in rbp with offset -33 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000000101101 //Compute r0 OR r2 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00000000000000000000000000100010 //Compute r0 OR r2 and write result to r2
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11100000000000100001111000101100 //Read at address in rbp with offset -33 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100001111000010001 //Write value in r1 to address in rbp with offset -33
11100000000000100101111000100001 //Read at address in rbp with offset -37 to r1
11100000000000100101111000101100 //Read at address in rbp with offset -37 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100101111000010001 //Write value in r1 to address in rbp with offset -37
10010000000000000001000100100110 //Jump to constant address 2195
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111011000000000101 //Set r5 to 59
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001000111001100 //Jump to constant address 2278
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000111011010 //Jump to constant address 2285
01110000000000000001000000001100 //Set r12 to 1
11010000000000100010111011000001 //Write value in r12 to address in rbp with offset -34
10010000000000000001001000010010 //Jump to constant address 2313
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011101000000001101 //Set r13 to 29
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001000111100110 //Jump to constant address 2291
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000111110000 //Jump to constant address 2296
10010000000000000001001000010000 //Jump to constant address 2312
01110000001100110010000000000001 //Set r1 to 818
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000011111000000000101 //Set r5 to 543
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
10010000000000000001000011011110 //Jump to constant address 2159
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101010111100001111 //Compute rsp - 42 and write result to rsp
11010000000000100110111001010001 //Write value in r5 to address in rbp with offset -38
11010000000000101001111001000001 //Write value in r4 to address in rbp with offset -41
01110000000000000001000000000001 //Set r1 to 1
11100000000000101001111000101100 //Read at address in rbp with offset -41 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001000111010 //Jump to constant address 2333
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001001010000 //Jump to constant address 2344
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111100000000000101 //Set r5 to 60
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000101001111000100101 //Read at address in rbp with offset -41 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000101001111000101100 //Read at address in rbp with offset -41 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011110000000001101 //Set r13 to 30
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001001010111100 //Jump to constant address 2398
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001011010010 //Jump to constant address 2409
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
11010000000000100111111011000001 //Write value in r12 to address in rbp with offset -39
01110000000000000000000000001100 //Set r12 to 0
11010000000000101000111011000001 //Write value in r12 to address in rbp with offset -40
01110000000000000001000000000001 //Set r1 to 1
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001011100110 //Jump to constant address 2419
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001111100110 //Jump to constant address 2547
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000101101000000000101 //Set r5 to 45
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000101010111000010001 //Write value in r1 to address in rbp with offset -42
01110000010101010011000000000001 //Set r1 to 1363
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100111111000100101 //Read at address in rbp with offset -39 to r5
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000100110111000101100 //Read at address in rbp with offset -38 to r12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000101010111000100100 //Read at address in rbp with offset -42 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000100111111000101100 //Read at address in rbp with offset -39 to r12
11100000000000101010111000101101 //Read at address in rbp with offset -42 to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100111111000010001 //Write value in r1 to address in rbp with offset -39
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111101000000000101 //Set r5 to 61
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001110011110 //Jump to constant address 2511
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001110101100 //Jump to constant address 2518
01110000000000000001000000001100 //Set r12 to 1
11010000000000101000111011000001 //Write value in r12 to address in rbp with offset -40
10010000000000000001001111100100 //Jump to constant address 2546
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011110000000001101 //Set r13 to 30
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001001110111000 //Jump to constant address 2524
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001111000010 //Jump to constant address 2529
10010000000000000001001111100010 //Jump to constant address 2545
01110000001100110010000000000001 //Set r1 to 818
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001001010000000000000101 //Set r5 to 592
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
10010000000000000001001011011010 //Jump to constant address 2413
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110010000000000101 //Set r5 to 50
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010001000010 //Jump to constant address 2593
01110000000000000000000000000010 //Set r2 to 0
01110000000000000000000000000011 //Set r3 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000001010001100010 //Jump to constant address 2609
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001000001000000001101 //Set r13 to 65
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010001011000 //Jump to constant address 2604
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000001010001100010 //Jump to constant address 2609
10010000000000000001010001100100 //Jump to constant address 2610
01110000000000000001000000000011 //Set r3 to 1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010010001100 //Jump to constant address 2630
01110000001100000001000000000010 //Set r2 to 769
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
00000000000000000000000000101101 //Compute r0 OR r2 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001010010011010 //Jump to constant address 2637
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110101000000000101 //Set r5 to 53
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010011110100 //Jump to constant address 2682
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010100001100 //Jump to constant address 2694
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001010100011010 //Jump to constant address 2701
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101011111100001111 //Compute rsp - 43 and write result to rsp
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110110000000000101 //Set r5 to 54
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000101011111000010001 //Write value in r1 to address in rbp with offset -43
01110000001100000001000000000001 //Set r1 to 769
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000101011111000100101 //Read at address in rbp with offset -43 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
11100000000000101011111000101100 //Read at address in rbp with offset -43 to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010110010110 //Jump to constant address 2763
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010110101110 //Jump to constant address 2775
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001010110111100 //Jump to constant address 2782
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001000000000000000101 //Set r5 to 64
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001011000010110 //Jump to constant address 2827
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011000101110 //Jump to constant address 2839
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001011000111100 //Jump to constant address 2846
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110100000000000101 //Set r5 to 52
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010110111000000000001 //Set r1 to 1207
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001011010010110 //Jump to constant address 2891
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011010101100 //Jump to constant address 2902
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100111111010000000000001 //Set r1 to 2554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011011000110 //Jump to constant address 2915
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011011011100 //Jump to constant address 2926
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000101010010011000000000001 //Set r1 to 2707
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011011110110 //Jump to constant address 2939
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011100001100 //Jump to constant address 2950
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111110111100001111 //Compute rsp - 62 and write result to rsp
11010000000000111100111001010001 //Write value in r5 to address in rbp with offset -60
01110000000000000001000000001100 //Set r12 to 1
11010000000000111101111011000001 //Write value in r12 to address in rbp with offset -61
01110000000000101111000000001100 //Set r12 to 47
11010000000000111011111011000001 //Write value in r12 to address in rbp with offset -59
01110000000000000001000000001100 //Set r12 to 1
11010000000000111110111011000001 //Write value in r12 to address in rbp with offset -62
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000111100111000101100 //Read at address in rbp with offset -60 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001011101010010 //Jump to constant address 2985
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100001100100 //Jump to constant address 3122
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000111100111000101100 //Read at address in rbp with offset -60 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000101111000000001101 //Set r13 to 47
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001011101111100 //Jump to constant address 3006
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100000001100 //Jump to constant address 3078
11100000000000111110111000100001 //Read at address in rbp with offset -62 to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000111011111011000001 //Write value in r12 to address in rbp with offset -59
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000101111000000000101 //Set r5 to 47
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010100101011000000000001 //Set r1 to 1323
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000111011111000000101 //Compute rbp - 59 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000000111110111011000001 //Write value in r12 to address in rbp with offset -62
01110000100111111010000000000001 //Set r1 to 2554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011111110100 //Jump to constant address 3066
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100000001010 //Jump to constant address 3077
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001100001010110 //Jump to constant address 3115
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000111100111000101100 //Read at address in rbp with offset -60 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
11100000000000111110111000100001 //Read at address in rbp with offset -62 to r1
11010000000000111011111000100001 //Write value in r2 to address in rbp with offset -59
11100000000000111110111000100001 //Read at address in rbp with offset -62 to r1
11100000000000111110111000101100 //Read at address in rbp with offset -62 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000111110111000010001 //Write value in r1 to address in rbp with offset -62
01110000000000000001000000000001 //Set r1 to 1
11100000000000111110111000101100 //Read at address in rbp with offset -62 to r12
01110000000000001101000000001101 //Set r13 to 13
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000001100000111110 //Jump to constant address 3103
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100001010100 //Jump to constant address 3114
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
11100000000000111101111000101100 //Read at address in rbp with offset -61 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000111101111000010001 //Write value in r1 to address in rbp with offset -61
10010000000000000001011100110000 //Jump to constant address 2968
11100000000000111110111000100001 //Read at address in rbp with offset -62 to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000111011111011000001 //Write value in r12 to address in rbp with offset -59
01110000000000000001000000000001 //Set r1 to 1
11100000000000111110111000101100 //Read at address in rbp with offset -62 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001100001110110 //Jump to constant address 3131
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100010001100 //Jump to constant address 3142
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000010001111101000000000001 //Set r1 to 1149
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000101111000000000101 //Set r5 to 47
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010100101011000000000001 //Set r1 to 1323
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000111011111000000101 //Compute rbp - 59 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010101001000000000001 //Set r1 to 1193
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010010010011000000000001 //Set r1 to 1171
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001001111100001111 //Compute rsp - 73 and write result to rsp
01110000011000110101000000000001 //Set r1 to 1589
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100100001000 //Jump to constant address 3204
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100100011110 //Jump to constant address 3215
01110000000000110001000000000001 //Set r1 to 49
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000011010001101000000000001 //Set r1 to 1677
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100100111000 //Jump to constant address 3228
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100101001110 //Jump to constant address 3239
01110000000000110010000000000001 //Set r1 to 50
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000101110001101000000000001 //Set r1 to 2957
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001001000101000000000101 //Set r5 to 581
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100101101100 //Jump to constant address 3254
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100110000010 //Jump to constant address 3265
01110000000000110011000000000001 //Set r1 to 51
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100111111010000000000001 //Set r1 to 2554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100110011100 //Jump to constant address 3278
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100110110010 //Jump to constant address 3289
01110000000000110100000000000001 //Set r1 to 52
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000011101001011000000000001 //Set r1 to 1867
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000001001001111000010001 //Write value in r1 to address in rbp with offset -73
01110000001110011011000000000001 //Set r1 to 923
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001001000111000000100 //Compute rbp - 72 and write result to r4
11100000000001001001111000100101 //Read at address in rbp with offset -73 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001100001111000000000001 //Set r1 to 783
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001001101001000000000101 //Set r5 to 617
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001100110010000000000001 //Set r1 to 818
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000001001000111000000101 //Compute rbp - 72 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000101110001101000000000001 //Set r1 to 2957
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000001000111000000000000101 //Set r5 to 568
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101000010100 //Jump to constant address 3338
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101000101010 //Jump to constant address 3349
01110000000000110011000000000001 //Set r1 to 51
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100111111010000000000001 //Set r1 to 2554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101001000100 //Jump to constant address 3362
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101001011010 //Jump to constant address 3373
01110000000000110100000000000001 //Set r1 to 52
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000011110110000000000000001 //Set r1 to 1968
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101001110110 //Jump to constant address 3387
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101010001100 //Jump to constant address 3398
01110000000000110101000000000001 //Set r1 to 53
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100000010011000000000001 //Set r1 to 2067
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000101 //Set r5 to 18
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
11100000000001001001111000100100 //Read at address in rbp with offset -73 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101010101100 //Jump to constant address 3414
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101011000010 //Jump to constant address 3425
01110000000000110110000000000001 //Set r1 to 54
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000101010010011000000000001 //Set r1 to 2707
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101011011100 //Jump to constant address 3438
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101011110010 //Jump to constant address 3449
01110000000000110111000000000001 //Set r1 to 55
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000010010000000000010 //Set r2 to 18
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
11100000000001001001111000100001 //Read at address in rbp with offset -73 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000001100110010000000000001 //Set r1 to 818
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000101 //Set r5 to 18
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000110000000000000001 //Set r1 to 48
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001000111100001111 //Compute rsp - 72 and write result to rsp
01110000000000000000000000000001 //Set r1 to 0
01110000000001001100000100000001 //Set highest 16 bits of r1 to 76
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001000111100001111 //Compute rsp - 72 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001000111100001111 //Compute rsp - 72 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001000111100001111 //Compute rsp - 72 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000111000100000000000000001 //Set r1 to 3616
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001101100101110 //Jump to constant address 3479
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000111000100000000000000001 //Set r1 to 3616
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001101101001100 //Jump to constant address 3494
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000111000100000000000000001 //Set r1 to 3616
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001101101100000 //Jump to constant address 3504
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000111000100000000000000001 //Set r1 to 3616
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000001101101110100 //Jump to constant address 3514
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
