10010000000000000000000000001100 //Jump to constant address 6
10010000000000000011010010100000 //Jump to constant address 6736
10010000000000000011010011001110 //Jump to constant address 6759
10010000000000000011010011111100 //Jump to constant address 6782
10010000000000000011010100101010 //Jump to constant address 6805
00000000000000000001101010111101 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000011000111000010 //Jump to constant address 6369
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101111 //data
00000000000000000000000000110100 //data
00000000000000000000000000110000 //data
00000000000000000000000000110100 //data
00000000000000000000000000101110 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001001101 //data
00000000000000000000000000000000 //data
00000000000000000000000001000101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001101000 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001110010 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000000000 //data
00000000000000000000000001101111 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000000000 //data
00000000000000000000000001000111 //data
00000000000000000000000001101111 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100011 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000000000 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001010100 //data
00000000000000000000000001010000 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000110011 //data
00000000000000000000000000110000 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000001001101 //data
00000000000000000000000001101111 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001101101 //data
00000000000000000000000001100001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000001101100 //data
00000000000000000000000001111001 //data
00000000000000000000000000001010 //data
00000000000000000000000001001100 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000000101111 //data
00000000000000000000000001001001 //data
00000000000000000000000001001110 //data
00000000000000000000000001000100 //data
00000000000000000000000001000101 //data
00000000000000000000000001011000 //data
00000000000000000000000000101110 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001001101 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000001100011 //data
00000000000000000000000001110101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000000000 //data
00000000000000000000000001001001 //data
00000000000000000000000001101110 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001100101 //data
00000000000000000000000000000000 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001010100 //data
00000000000000000000000001010000 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000110010 //data
00000000000000000000000000110000 //data
00000000000000000000000000110000 //data
00000000000000000000000000100000 //data
00000000000000000000000001001111 //data
00000000000000000000000001001011 //data
00000000000000000000000000001010 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000001000110 //data
00000000000000000000000001010000 //data
00000000000000000000000001000111 //data
00000000000000000000000001000011 //data
00000000000000000000000000110100 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110000 //data
00000000000000000000000000001010 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001000001 //data
00000000000000000000000001010010 //data
00000000000000000000000001010100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010000 //data
00000000000000000000000001000001 //data
00000000000000000000000001010100 //data
00000000000000000000000001001000 //data
00000000000000000000000001001110 //data
00000000000000000000000001000001 //data
00000000000000000000000001001101 //data
00000000000000000000000001000101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000001000001 //data
00000000000000000000000001010010 //data
00000000000000000000000001010100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010010 //data
00000000000000000000000001000101 //data
00000000000000000000000001010001 //data
00000000000000000000000001010101 //data
00000000000000000000000001000101 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000111100 //data
00000000000000000000000000100001 //data
00000000000000000000000001000100 //data
00000000000000000000000001001111 //data
00000000000000000000000001000011 //data
00000000000000000000000001010100 //data
00000000000000000000000001011001 //data
00000000000000000000000001010000 //data
00000000000000000000000001000101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101101 //data
00000000000000000000000001101100 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000001101000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101101 //data
00000000000000000000000001101100 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000111110 //data
00000000000000000000000001000101 //data
00000000000000000000000001010010 //data
00000000000000000000000001010010 //data
00000000000000000000000001001111 //data
00000000000000000000000001010010 //data
00000000000000000000000000110100 //data
00000000000000000000000000110000 //data
00000000000000000000000000110100 //data
00000000000000000000000000111100 //data
00000000000000000000000000101111 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001110100 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000000101111 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000001100010 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000111110 //data
00000000000000000000000001000101 //data
00000000000000000000000001010010 //data
00000000000000000000000001010010 //data
00000000000000000000000001001111 //data
00000000000000000000000001010010 //data
00000000000000000000000000100000 //data
00000000000000000000000000110100 //data
00000000000000000000000000110000 //data
00000000000000000000000000110100 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000001010100 //data
00000000000000000000000001101000 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000000100000 //data
00000000000000000000000001101001 //data
00000000000000000000000001110011 //data
00000000000000000000000000100000 //data
00000000000000000000000001101110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101000 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110000 //data
00000000000000000000000001100001 //data
00000000000000000000000001100111 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001111001 //data
00000000000000000000000001101111 //data
00000000000000000000000001110101 //data
00000000000000000000000000100000 //data
00000000000000000000000001100001 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001101111 //data
00000000000000000000000001101011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000111100 //data
00000000000000000000000000101111 //data
00000000000000000000000001100010 //data
00000000000000000000000001101111 //data
00000000000000000000000001100100 //data
00000000000000000000000001111001 //data
00000000000000000000000000111110 //data
00000000000000000000000000111100 //data
00000000000000000000000000101111 //data
00000000000000000000000001101000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101101 //data
00000000000000000000000001101100 //data
00000000000000000000000000111110 //data
00000000000000000000000000000000 //data
00000000000000000000000001000101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110111 //data
00000000000000000000000001101000 //data
00000000000000000000000001101001 //data
00000000000000000000000001101100 //data
00000000000000000000000001100101 //data
00000000000000000000000000100000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001100100 //data
00000000000000000000000001100001 //data
00000000000000000000000001110100 //data
00000000000000000000000001100001 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001000101 //data
00000000000000000000000001001110 //data
00000000000000000000000001000100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010010 //data
00000000000000000000000001000101 //data
00000000000000000000000001010001 //data
00000000000000000000000001010101 //data
00000000000000000000000001000101 //data
00000000000000000000000001010011 //data
00000000000000000000000001010100 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000001000101 //data
00000000000000000000000001001110 //data
00000000000000000000000001000100 //data
00000000000000000000000000100000 //data
00000000000000000000000001010000 //data
00000000000000000000000001000001 //data
00000000000000000000000001010100 //data
00000000000000000000000001001000 //data
00000000000000000000000001001110 //data
00000000000000000000000001000001 //data
00000000000000000000000001001101 //data
00000000000000000000000001000101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000001110010 //data
00000000000000000000000001100101 //data
00000000000000000000000001100001 //data
00000000000000000000000001100100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001110010 //data
00000000000000000000000000000000 //data
00000000000000000000000001010010 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000001110100 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000000000 //data
00000000000000000000000001001000 //data
00000000000000000000000001010100 //data
00000000000000000000000001010100 //data
00000000000000000000000001010000 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110001 //data
00000000000000000000000000100000 //data
00000000000000000000000000110100 //data
00000000000000000000000000110000 //data
00000000000000000000000000110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001000110 //data
00000000000000000000000001101111 //data
00000000000000000000000001110101 //data
00000000000000000000000001101110 //data
00000000000000000000000001100100 //data
00000000000000000000000000001010 //data
00000000000000000000000001010011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000001000110 //data
00000000000000000000000001010000 //data
00000000000000000000000001000111 //data
00000000000000000000000001000011 //data
00000000000000000000000000110100 //data
00000000000000000000000000101111 //data
00000000000000000000000000110001 //data
00000000000000000000000000101110 //data
00000000000000000000000000110000 //data
00000000000000000000000000001010 //data
00000000000000000000000001000011 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001101110 //data
00000000000000000000000001110100 //data
00000000000000000000000000101101 //data
00000000000000000000000001010100 //data
00000000000000000000000001111001 //data
00000000000000000000000001110000 //data
00000000000000000000000001100101 //data
00000000000000000000000000111010 //data
00000000000000000000000000100000 //data
00000000000000000000000001110100 //data
00000000000000000000000001100101 //data
00000000000000000000000001111000 //data
00000000000000000000000001110100 //data
00000000000000000000000000101111 //data
00000000000000000000000001101000 //data
00000000000000000000000001110100 //data
00000000000000000000000001101101 //data
00000000000000000000000001101100 //data
00000000000000000000000000001010 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00000000000000000000000001010011 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000001100011 //data
00000000000000000000000001101100 //data
00000000000000000000000001101111 //data
00000000000000000000000001110011 //data
00000000000000000000000001100101 //data
00000000000000000000000001100100 //data
00000000000000000000000000000000 //data
00000000000000000000000000101100 //data
00000000000000000000000000100000 //data
00000000000000000000000001001001 //data
00000000000000000000000001000011 //data
00000000000000000000000000100000 //data
00000000000000000000000001110110 //data
00000000000000000000000001100101 //data
00000000000000000000000001110010 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101111 //data
00000000000000000000000001101110 //data
00000000000000000000000000000000 //data
00000000000000000000000001010000 //data
00000000000000000000000001110010 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110011 //data
00000000000000000000000001110011 //data
00000000000000000000000001101001 //data
00000000000000000000000001101110 //data
00000000000000000000000001100111 //data
00000000000000000000000000100000 //data
00000000000000000000000001110011 //data
00000000000000000000000001101111 //data
00000000000000000000000001100011 //data
00000000000000000000000001101011 //data
00000000000000000000000001100101 //data
00000000000000000000000001110100 //data
00000000000000000000000000100000 //data
00000000000000000000000000000000 //data
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110010000100 //Jump to constant address 1602
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110010011010 //Jump to constant address 1613
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000000001 //Set r1 to 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000110010101000 //Jump to constant address 1620
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110011000010 //Jump to constant address 1633
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
10010000000000000000110010011100 //Jump to constant address 1614
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110011100010 //Jump to constant address 1649
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110011111000 //Jump to constant address 1660
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000110100000110 //Jump to constant address 1667
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110100011000 //Jump to constant address 1676
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
10010000000000000000110011111010 //Jump to constant address 1661
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000010 //Set r2 to 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000000000000000000000000111101 //Compute r0 OR r3 and write result to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000110100111100 //Jump to constant address 1694
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110101111100 //Jump to constant address 1726
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11100000000000000000000100001000 //Read at address in r1 with offset 0 to r8
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000110000000 //Write value in r8 to address in r1 with offset 0
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
10010000000000000000110100110000 //Jump to constant address 1688
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000000100 //Set r4 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000110111000010 //Jump to constant address 1761
01110000000000000000000000000100 //Set r4 to 0
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110111011110 //Jump to constant address 1775
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
10010000000000000000110110110100 //Jump to constant address 1754
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000011011010010000000000001 //Set r1 to 1746
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000011011010010000000000001 //Set r1 to 1746
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110010110000000000101 //Set r5 to 1430
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000001111001010001 //Write value in r5 to address in rbp with offset -1
11010000000000000010111001000001 //Write value in r4 to address in rbp with offset -2
01110000011001100111000000000001 //Set r1 to 1639
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
01110000000000001010000000000100 //Set r4 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000011111000010001 //Write value in r1 to address in rbp with offset -3
01110000000000000000000000001100 //Set r12 to 0
11010000000000000100111011000001 //Write value in r12 to address in rbp with offset -4
01110000011000111000000000000001 //Set r1 to 1592
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
01110000000000001010000000000100 //Set r4 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000001111000010001 //Write value in r1 to address in rbp with offset -1
01110000000000000001000000000001 //Set r1 to 1
11100000000000000001111000101100 //Read at address in rbp with offset -1 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000111001100010 //Jump to constant address 1841
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111010000110 //Jump to constant address 1859
01110000011100001111000000000001 //Set r1 to 1807
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
11100000000000000010111000100100 //Read at address in rbp with offset -2 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
11100000000000000011111000101100 //Read at address in rbp with offset -3 to r12
01110000000000110000000000001101 //Set r13 to 48
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000000000100111000100001 //Read at address in rbp with offset -4 to r1
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11010000000000000100111000110001 //Write value in r3 to address in rbp with offset -4
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000010111000101100 //Read at address in rbp with offset -2 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000000100111000100001 //Read at address in rbp with offset -4 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000101111100001111 //Compute rsp - 5 and write result to rsp
11010000000000000101111001000001 //Write value in r4 to address in rbp with offset -5
01110000011100001111000000000001 //Set r1 to 1807
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000101111000100100 //Read at address in rbp with offset -5 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000101111000101100 //Read at address in rbp with offset -5 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001001111100001111 //Compute rsp - 9 and write result to rsp
11010000000000000110111001010001 //Write value in r5 to address in rbp with offset -6
11010000000000000111111001000001 //Write value in r4 to address in rbp with offset -7
01110000011001100111000000000001 //Set r1 to 1639
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
01110000000000010000000000000100 //Set r4 to 16
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000001000111000010001 //Write value in r1 to address in rbp with offset -8
01110000000000000000000000001100 //Set r12 to 0
11010000000000001001111011000001 //Write value in r12 to address in rbp with offset -9
01110000011000111000000000000001 //Set r1 to 1592
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
01110000000000010000000000000100 //Set r4 to 16
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000110111000010001 //Write value in r1 to address in rbp with offset -6
01110000000000000001000000000001 //Set r1 to 1
11100000000000000110111000101100 //Read at address in rbp with offset -6 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000111100111100 //Jump to constant address 1950
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111101100000 //Jump to constant address 1968
01110000011101111100000000000001 //Set r1 to 1916
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
11100000000000000111111000100100 //Read at address in rbp with offset -7 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001001111000101100 //Read at address in rbp with offset -9 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001001111000010001 //Write value in r1 to address in rbp with offset -9
01110000000000000001000000000001 //Set r1 to 1
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000000001001000000001101 //Set r13 to 9
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000111101101100 //Jump to constant address 1974
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111110000110 //Jump to constant address 1987
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000001000001000000001101 //Set r13 to 65
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000001010000000001101 //Set r13 to 10
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
10010000000000000000111110001110 //Jump to constant address 1991
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000000110000000000001101 //Set r13 to 48
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000000001001111000100001 //Read at address in rbp with offset -9 to r1
11100000000000001001111000101100 //Read at address in rbp with offset -9 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11010000000000001001111000110001 //Write value in r3 to address in rbp with offset -9
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000111111000101100 //Read at address in rbp with offset -7 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000001001111000100001 //Read at address in rbp with offset -9 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001010111100001111 //Compute rsp - 10 and write result to rsp
11010000000000001010111001000001 //Write value in r4 to address in rbp with offset -10
01110000000000000000000000001100 //Set r12 to 0
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000110000000000001100 //Set r12 to 48
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000000000000001000000001100 //Set r12 to 1
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000001111000000000001100 //Set r12 to 120
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000000000000010000000001100 //Set r12 to 2
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001010111000010001 //Write value in r1 to address in rbp with offset -10
01110000011101111100000000000001 //Set r1 to 1916
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000001010111000100100 //Read at address in rbp with offset -10 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
01110000000001001100000100000011 //Set highest 16 bits of r3 to 76
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110010011000100110000000000001 //Set r1 to 9766
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
01110010011000100111000000000001 //Set r1 to 9767
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001000001101010 //Jump to constant address 2101
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000001110100 //Jump to constant address 2106
10010000000000000001000001011010 //Jump to constant address 2093
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111111011111111000000000010 //Set r2 to 0b1111111011111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000000100000000000000000010 //Set r2 to 0b100000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000110001000000000001 //Set r1 to 9777
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001011111100001111 //Compute rsp - 11 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001000100010000 //Jump to constant address 2184
01110010011000100100000000000001 //Set r1 to 9764
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
10010000000000000001000011111110 //Jump to constant address 2175
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000100010000000000101 //Set r5 to 34
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000001011111000010001 //Write value in r1 to address in rbp with offset -11
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001011111000100001 //Read at address in rbp with offset -11 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001100111100001111 //Compute rsp - 12 and write result to rsp
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000100010000000000101 //Set r5 to 34
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000001100111000010001 //Write value in r1 to address in rbp with offset -12
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001100111000100001 //Read at address in rbp with offset -12 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001101111100001111 //Compute rsp - 13 and write result to rsp
11010000000000001101111001010001 //Write value in r5 to address in rbp with offset -13
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001000111111000 //Jump to constant address 2300
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001000100000 //Jump to constant address 2320
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000001101111000101100 //Read at address in rbp with offset -13 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001101111000010001 //Write value in r1 to address in rbp with offset -13
11100000000000001101111000100001 //Read at address in rbp with offset -13 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
10010000000000000001000111101010 //Jump to constant address 2293
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010000111100001111 //Compute rsp - 16 and write result to rsp
11010000000000001110111001010001 //Write value in r5 to address in rbp with offset -14
11010000000000001111111001000001 //Write value in r4 to address in rbp with offset -15
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
01110000000000000000000000001100 //Set r12 to 0
11010000000000010000111011000001 //Write value in r12 to address in rbp with offset -16
01110000000000000001000000000001 //Set r1 to 1
11100000000000010000111000101100 //Read at address in rbp with offset -16 to r12
11100000000000001111111000101101 //Read at address in rbp with offset -15 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001001001001100 //Jump to constant address 2342
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001001010000000 //Jump to constant address 2368
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000001110111000101100 //Read at address in rbp with offset -14 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001110111000010001 //Write value in r1 to address in rbp with offset -14
11100000000000001110111000100001 //Read at address in rbp with offset -14 to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
11100000000000010000111000100001 //Read at address in rbp with offset -16 to r1
11100000000000010000111000101100 //Read at address in rbp with offset -16 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000010000111000010001 //Write value in r1 to address in rbp with offset -16
10010000000000000001001001000000 //Jump to constant address 2336
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011011111100001111 //Compute rsp - 27 and write result to rsp
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000011011111000010001 //Write value in r1 to address in rbp with offset -27
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000011111011110000000000001 //Set r1 to 2014
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000011010111000000100 //Compute rbp - 26 and write result to r4
11100000000000011011111000100101 //Read at address in rbp with offset -27 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000011011010010000000000001 //Set r1 to 1746
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000011010111000000101 //Compute rbp - 26 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000011000011000000000000101 //Set r5 to 1560
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011101111100001111 //Compute rsp - 29 and write result to rsp
11010000000000011100111001010001 //Write value in r5 to address in rbp with offset -28
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010101000000000101 //Set r5 to 21
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011100111000100101 //Read at address in rbp with offset -28 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000011101111000010001 //Write value in r1 to address in rbp with offset -29
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000011101111000100001 //Read at address in rbp with offset -29 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111100000000000101 //Set r5 to 60
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000101000000000101 //Set r5 to 5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001100100000000000101 //Set r5 to 100
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100110010001000000000001 //Set r1 to 2449
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000101000000000101 //Set r5 to 5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001010001101110 //Jump to constant address 2615
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010010000110 //Jump to constant address 2627
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001010010010100 //Jump to constant address 2634
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010011000010 //Jump to constant address 2657
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010011001100 //Jump to constant address 2662
10010000000000000001010010101000 //Jump to constant address 2644
01110000100110010001000000000001 //Set r1 to 2449
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000111000000000101 //Set r5 to 7
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010011101000 //Jump to constant address 2676
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010011111110 //Jump to constant address 2687
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100110010001000000000001 //Set r1 to 2449
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000110000000000101 //Set r5 to 6
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001010001000000001101 //Set r13 to 81
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010100011010 //Jump to constant address 2701
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010100110000 //Jump to constant address 2712
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010101000000001101 //Set r13 to 21
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010101001100 //Jump to constant address 2726
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010101010110 //Jump to constant address 2731
10010000000000000001010100110010 //Jump to constant address 2713
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110000000000000101 //Set r5 to 48
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010110011100 //Jump to constant address 2766
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001010110110010 //Jump to constant address 2777
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110001000000000101 //Set r5 to 49
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001010111111000 //Jump to constant address 2812
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011000001110 //Jump to constant address 2823
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011110111100001111 //Compute rsp - 30 and write result to rsp
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001100000000000101 //Set r5 to 12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001101000000000000101 //Set r5 to 104
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010000000000001101 //Set r13 to 16
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011000000000001101 //Set r13 to 24
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000011110111000101100 //Read at address in rbp with offset -30 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000011110111000010001 //Write value in r1 to address in rbp with offset -30
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000011110111000100001 //Read at address in rbp with offset -30 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011111111100001111 //Compute rsp - 31 and write result to rsp
11010000000000011111111001010001 //Write value in r5 to address in rbp with offset -31
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111001000000000101 //Set r5 to 57
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000100101 //Read at address in rbp with offset -31 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000101100 //Read at address in rbp with offset -31 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000101100 //Read at address in rbp with offset -31 to r12
01110000000000010000000000001101 //Set r13 to 16
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000101100 //Read at address in rbp with offset -31 to r12
01110000000000011000000000001101 //Set r13 to 24
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001011110001000 //Jump to constant address 3012
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011110011110 //Jump to constant address 3023
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000100101111100001111 //Compute rsp - 37 and write result to rsp
11010000000000100000111001010001 //Write value in r5 to address in rbp with offset -32
11010000000000100100111001000001 //Write value in r4 to address in rbp with offset -36
01110000000000000001000000000001 //Set r1 to 1
11100000000000100100111000101100 //Read at address in rbp with offset -36 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001011111000100 //Jump to constant address 3042
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001011111011010 //Jump to constant address 3053
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111010000000000101 //Set r5 to 58
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100100111000100101 //Read at address in rbp with offset -36 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100100111000101100 //Read at address in rbp with offset -36 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011101000000001101 //Set r13 to 29
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001100001000110 //Jump to constant address 3107
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100001011100 //Jump to constant address 3118
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
11010000000000100001111011000001 //Write value in r12 to address in rbp with offset -33
01110000000000000000000000001100 //Set r12 to 0
11010000000000100010111011000001 //Write value in r12 to address in rbp with offset -34
01110000000000000001000000000001 //Set r1 to 1
11100000000000100010111000101100 //Read at address in rbp with offset -34 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001100001110000 //Jump to constant address 3128
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100110011010 //Jump to constant address 3277
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000100111000000000101 //Set r5 to 39
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000100011111000010001 //Write value in r1 to address in rbp with offset -35
01110000000000000000000000001100 //Set r12 to 0
11010000000000100101111011000001 //Write value in r12 to address in rbp with offset -37
01110000000000000001000000000001 //Set r1 to 1
11100000000000100101111000101100 //Read at address in rbp with offset -37 to r12
11100000000000100011111000101101 //Read at address in rbp with offset -35 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000001100010111000 //Jump to constant address 3164
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100011111110 //Jump to constant address 3199
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000100001111000100010 //Read at address in rbp with offset -33 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000000100000111000101100 //Read at address in rbp with offset -32 to r12
00000000000000000000000000101101 //Compute r0 OR r2 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00000000000000000000000000100010 //Compute r0 OR r2 and write result to r2
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11100000000000100001111000101100 //Read at address in rbp with offset -33 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100001111000010001 //Write value in r1 to address in rbp with offset -33
11100000000000100101111000100001 //Read at address in rbp with offset -37 to r1
11100000000000100101111000101100 //Read at address in rbp with offset -37 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100101111000010001 //Write value in r1 to address in rbp with offset -37
10010000000000000001100010101100 //Jump to constant address 3158
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111011000000000101 //Set r5 to 59
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001100101010010 //Jump to constant address 3241
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100101100000 //Jump to constant address 3248
01110000000000000001000000001100 //Set r12 to 1
11010000000000100010111011000001 //Write value in r12 to address in rbp with offset -34
10010000000000000001100110011000 //Jump to constant address 3276
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011101000000001101 //Set r13 to 29
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001100101101100 //Jump to constant address 3254
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100101110110 //Jump to constant address 3259
10010000000000000001100110010110 //Jump to constant address 3275
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010101101011000000000101 //Set r5 to 1387
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
10010000000000000001100001100100 //Jump to constant address 3122
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101010111100001111 //Compute rsp - 42 and write result to rsp
11010000000000100110111001010001 //Write value in r5 to address in rbp with offset -38
11010000000000101001111001000001 //Write value in r4 to address in rbp with offset -41
01110000000000000001000000000001 //Set r1 to 1
11100000000000101001111000101100 //Read at address in rbp with offset -41 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001100111000000 //Jump to constant address 3296
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001100111010110 //Jump to constant address 3307
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111100000000000101 //Set r5 to 60
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000101001111000100101 //Read at address in rbp with offset -41 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000101001111000101100 //Read at address in rbp with offset -41 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011110000000001101 //Set r13 to 30
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001101001000010 //Jump to constant address 3361
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101001011000 //Jump to constant address 3372
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
11010000000000100111111011000001 //Write value in r12 to address in rbp with offset -39
01110000000000000000000000001100 //Set r12 to 0
11010000000000101000111011000001 //Write value in r12 to address in rbp with offset -40
01110000000000000001000000000001 //Set r1 to 1
11100000000000101000111000101100 //Read at address in rbp with offset -40 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001101001101100 //Jump to constant address 3382
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101101101100 //Jump to constant address 3510
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000101101000000000101 //Set r5 to 45
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000101010111000010001 //Write value in r1 to address in rbp with offset -42
01110000100100010110000000000001 //Set r1 to 2326
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100111111000100101 //Read at address in rbp with offset -39 to r5
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000100110111000101100 //Read at address in rbp with offset -38 to r12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000000101010111000100100 //Read at address in rbp with offset -42 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000100111111000101100 //Read at address in rbp with offset -39 to r12
11100000000000101010111000101101 //Read at address in rbp with offset -42 to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100111111000010001 //Write value in r1 to address in rbp with offset -39
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000111101000000000101 //Set r5 to 61
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001101100100100 //Jump to constant address 3474
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101100110010 //Jump to constant address 3481
01110000000000000001000000001100 //Set r12 to 1
11010000000000101000111011000001 //Write value in r12 to address in rbp with offset -40
10010000000000000001101101101010 //Jump to constant address 3509
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000011110000000001101 //Set r13 to 30
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001101100111110 //Jump to constant address 3487
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001101101001000 //Jump to constant address 3492
10010000000000000001101101101000 //Jump to constant address 3508
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010000011011000000000101 //Set r5 to 1051
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
10010000000000000001101001100000 //Jump to constant address 3376
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110010000000000101 //Set r5 to 50
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001101111001000 //Jump to constant address 3556
01110000000000000000000000000010 //Set r2 to 0
01110000000000000000000000000011 //Set r3 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000001101111101000 //Jump to constant address 3572
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000001000001000000001101 //Set r13 to 65
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001101111011110 //Jump to constant address 3567
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000001101111101000 //Jump to constant address 3572
10010000000000000001101111101010 //Jump to constant address 3573
01110000000000000001000000000011 //Set r3 to 1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110000000010 //Jump to constant address 3585
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001110000010000 //Jump to constant address 3592
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110101000000000101 //Set r5 to 53
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001110001101010 //Jump to constant address 3637
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110010000010 //Jump to constant address 3649
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001110010010000 //Jump to constant address 3656
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110110000000000101 //Set r5 to 54
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001110011111010 //Jump to constant address 3709
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110100010010 //Jump to constant address 3721
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001110100100000 //Jump to constant address 3728
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001000000000000000101 //Set r5 to 64
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001110101111010 //Jump to constant address 3773
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001110110010010 //Jump to constant address 3785
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001110110100000 //Jump to constant address 3792
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011010111100001111 //Compute rsp - 26 and write result to rsp
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110100000000000101 //Set r5 to 52
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001111010000000000001 //Set r1 to 2170
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000010100000000001101 //Set r13 to 20
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001110111111010 //Jump to constant address 3837
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111000010000 //Jump to constant address 3848
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000110110111101000000000001 //Set r1 to 3517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111000101010 //Jump to constant address 3861
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111001000000 //Jump to constant address 3872
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000111001001110000000000001 //Set r1 to 3662
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111001011010 //Jump to constant address 3885
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111001110000 //Jump to constant address 3896
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111101111100001111 //Compute rsp - 61 and write result to rsp
11010000000000111011111001010001 //Write value in r5 to address in rbp with offset -59
01110000000000000001000000001100 //Set r12 to 1
11010000000000111100111011000001 //Write value in r12 to address in rbp with offset -60
01110000000000101111000000001100 //Set r12 to 47
11010000000000111010111011000001 //Write value in r12 to address in rbp with offset -58
01110000000000000001000000001100 //Set r12 to 1
11010000000000111101111011000001 //Write value in r12 to address in rbp with offset -61
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000111011111000101100 //Read at address in rbp with offset -59 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000001111010110110 //Jump to constant address 3931
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111111011010 //Jump to constant address 4077
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000111011111000101100 //Read at address in rbp with offset -59 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000101111000000001101 //Set r13 to 47
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001111011100000 //Jump to constant address 3952
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111101111000 //Jump to constant address 4028
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
01110000000000000000000000001101 //Set r13 to 0
01110000000000000001000000000111 //Set r7 to 1
00000011100000000000011100010111 //Compute r7 * r1 and write result to r7
00001010000000111010011100000111 //Compute r7 - 58 and write result to r7
00000001100000000000011111100111 //Compute r7 + rbp and write result to r7
11010000000000000000011111010000 //Write value in r13 to address in r7 with offset 0
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000101111000000000101 //Set r5 to 47
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100011101110000000000001 //Set r1 to 2286
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000111010111000000101 //Compute rbp - 58 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000000111101111011000001 //Write value in r12 to address in rbp with offset -61
01110000110110111101000000000001 //Set r1 to 3517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111101100000 //Jump to constant address 4016
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111101110110 //Jump to constant address 4027
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000001111111001100 //Jump to constant address 4070
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000111011111000101100 //Read at address in rbp with offset -59 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
00000000000000000000000000101101 //Compute r0 OR r2 and write result to r13
01110000000000000001000000000111 //Set r7 to 1
00000011100000000000011100010111 //Compute r7 * r1 and write result to r7
00001010000000111010011100000111 //Compute r7 - 58 and write result to r7
00000001100000000000011111100111 //Compute r7 + rbp and write result to r7
11010000000000000000011111010000 //Write value in r13 to address in r7 with offset 0
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
11100000000000111101111000101100 //Read at address in rbp with offset -61 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000111101111000010001 //Write value in r1 to address in rbp with offset -61
01110000000000000001000000000001 //Set r1 to 1
11100000000000111101111000101100 //Read at address in rbp with offset -61 to r12
01110000000000001101000000001101 //Set r13 to 13
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000001111110110100 //Jump to constant address 4058
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000001111111001010 //Jump to constant address 4069
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
11100000000000111100111000100001 //Read at address in rbp with offset -60 to r1
11100000000000111100111000101100 //Read at address in rbp with offset -60 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000111100111000010001 //Write value in r1 to address in rbp with offset -60
10010000000000000001111010010100 //Jump to constant address 3914
11100000000000111101111000100001 //Read at address in rbp with offset -61 to r1
01110000000000000000000000001101 //Set r13 to 0
01110000000000000001000000000111 //Set r7 to 1
00000011100000000000011100010111 //Compute r7 * r1 and write result to r7
00001010000000111010011100000111 //Compute r7 - 58 and write result to r7
00000001100000000000011111100111 //Compute r7 + rbp and write result to r7
11010000000000000000011111010000 //Write value in r13 to address in r7 with offset 0
01110000000000000001000000000001 //Set r1 to 1
11100000000000111101111000101100 //Read at address in rbp with offset -61 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000001111111110100 //Jump to constant address 4090
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000000001010 //Jump to constant address 4101
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000100001000000000000000001 //Set r1 to 2112
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000101111000000000101 //Set r5 to 47
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100011101110000000000001 //Set r1 to 2286
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000111010111000000101 //Compute rbp - 58 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001101100000000000001 //Set r1 to 2156
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100001010110000000000001 //Set r1 to 2134
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111110111111111000000000010 //Set r2 to 0b1111110111111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000001000000000000000000010 //Set r2 to 0b1000000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
01110010011100110100000000000001 //Set r1 to 10036
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001000010111100001111 //Compute rsp - 66 and write result to rsp
11010000000001000000111001010001 //Write value in r5 to address in rbp with offset -64
11010000000001000001111001000001 //Write value in r4 to address in rbp with offset -65
11010000000000111110111000110001 //Write value in r3 to address in rbp with offset -62
11010000000000111111111000100001 //Write value in r2 to address in rbp with offset -63
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001000000111000101100 //Read at address in rbp with offset -64 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000000111000100101 //Read at address in rbp with offset -64 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000001111000100101 //Read at address in rbp with offset -65 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001000010111011000001 //Write value in r12 to address in rbp with offset -66
01110000000000000001000000000001 //Set r1 to 1
11100000000001000010111000101100 //Read at address in rbp with offset -66 to r12
11100000000000111111111000101101 //Read at address in rbp with offset -63 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010000100111100 //Jump to constant address 4254
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010000101110110 //Jump to constant address 4283
01110001000001011110000000000010 //Set r2 to 4190
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
11100000000001000010111000100001 //Read at address in rbp with offset -66 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000111110111000101100 //Read at address in rbp with offset -62 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11100000000000000000000100000101 //Read at address in r1 with offset 0 to r5
00000000000000000000000000101101 //Compute r0 OR r2 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001000010111000100001 //Read at address in rbp with offset -66 to r1
11100000000001000010111000101100 //Read at address in rbp with offset -66 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001000010111000010001 //Write value in r1 to address in rbp with offset -66
10010000000000000010000100110000 //Jump to constant address 4248
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001000101111100001111 //Compute rsp - 69 and write result to rsp
11010000000001000011111001010001 //Write value in r5 to address in rbp with offset -67
11010000000001000100111001000001 //Write value in r4 to address in rbp with offset -68
11010000000001000101111000110001 //Write value in r3 to address in rbp with offset -69
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001000011111000101100 //Read at address in rbp with offset -67 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000011111000100101 //Read at address in rbp with offset -67 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000100111000100101 //Read at address in rbp with offset -68 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000101111000100101 //Read at address in rbp with offset -69 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001000101111000100001 //Read at address in rbp with offset -69 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001000111100001111 //Compute rsp - 72 and write result to rsp
11010000000001000110111001010001 //Write value in r5 to address in rbp with offset -70
11010000000001000111111001000001 //Write value in r4 to address in rbp with offset -71
11010000000001001000111000110001 //Write value in r3 to address in rbp with offset -72
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001000110111000101100 //Read at address in rbp with offset -70 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000110111000100101 //Read at address in rbp with offset -70 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001000111111000100101 //Read at address in rbp with offset -71 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001001000111000101100 //Read at address in rbp with offset -72 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001000111000100101 //Read at address in rbp with offset -72 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001001101111100001111 //Compute rsp - 77 and write result to rsp
11010000000001001011111001010001 //Write value in r5 to address in rbp with offset -75
11010000000001001100111001000001 //Write value in r4 to address in rbp with offset -76
11010000000001001001111000110001 //Write value in r3 to address in rbp with offset -73
11010000000001001010111000100001 //Write value in r2 to address in rbp with offset -74
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001001011111000101100 //Read at address in rbp with offset -75 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001011111000100101 //Read at address in rbp with offset -75 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001100111000100101 //Read at address in rbp with offset -76 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001001101111011000001 //Write value in r12 to address in rbp with offset -77
01110000000000000001000000000001 //Set r1 to 1
11100000000001001101111000101100 //Read at address in rbp with offset -77 to r12
11100000000001001010111000101101 //Read at address in rbp with offset -74 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010001100000100 //Jump to constant address 4482
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010001101000000 //Jump to constant address 4512
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001001101111000100010 //Read at address in rbp with offset -77 to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000001001001111000101100 //Read at address in rbp with offset -73 to r12
00000000000000000000000000101101 //Compute r0 OR r2 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00000000000000000000000000100010 //Compute r0 OR r2 and write result to r2
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11100000000001001101111000100001 //Read at address in rbp with offset -77 to r1
11100000000001001101111000101100 //Read at address in rbp with offset -77 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001001101111000010001 //Write value in r1 to address in rbp with offset -77
10010000000000000010001011111000 //Jump to constant address 4476
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010000111100001111 //Compute rsp - 80 and write result to rsp
11010000000001001110111001010001 //Write value in r5 to address in rbp with offset -78
11010000000001001111111001000001 //Write value in r4 to address in rbp with offset -79
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001001110111000101100 //Read at address in rbp with offset -78 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001110111000100101 //Read at address in rbp with offset -78 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001001111111000100101 //Read at address in rbp with offset -79 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000001010000111000010001 //Write value in r1 to address in rbp with offset -80
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001010000111000100001 //Read at address in rbp with offset -80 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010011111100001111 //Compute rsp - 83 and write result to rsp
11010000000001010001111001010001 //Write value in r5 to address in rbp with offset -81
11010000000001010010111001000001 //Write value in r4 to address in rbp with offset -82
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001010001111000101100 //Read at address in rbp with offset -81 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010001111000100101 //Read at address in rbp with offset -81 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010010111000100101 //Read at address in rbp with offset -82 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001010011111000010001 //Write value in r1 to address in rbp with offset -83
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001010011111000101100 //Read at address in rbp with offset -83 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001010011111000010001 //Write value in r1 to address in rbp with offset -83
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001010011111000100001 //Read at address in rbp with offset -83 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001010101111100001111 //Compute rsp - 85 and write result to rsp
11010000000001010100111001010001 //Write value in r5 to address in rbp with offset -84
11010000000001010101111001000001 //Write value in r4 to address in rbp with offset -85
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010100111000101100 //Read at address in rbp with offset -84 to r12
01110000000000000101000000001101 //Set r13 to 5
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110000000000001100000000001100 //Set r12 to 12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010101111000100101 //Read at address in rbp with offset -85 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011000111100001111 //Compute rsp - 88 and write result to rsp
11010000000001010110111001010001 //Write value in r5 to address in rbp with offset -86
11010000000001010111111001000001 //Write value in r4 to address in rbp with offset -87
11010000000001011000111000110001 //Write value in r3 to address in rbp with offset -88
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010111111000100101 //Read at address in rbp with offset -87 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001010110111000101100 //Read at address in rbp with offset -86 to r12
01110000000000000101000000001101 //Set r13 to 5
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110000000000001100000000001100 //Set r12 to 12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001011000111000100101 //Read at address in rbp with offset -88 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011011111100001111 //Compute rsp - 91 and write result to rsp
11010000000001011001111001010001 //Write value in r5 to address in rbp with offset -89
11010000000001011010111001000001 //Write value in r4 to address in rbp with offset -90
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001011010111000101100 //Read at address in rbp with offset -90 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001011010111000100101 //Read at address in rbp with offset -90 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001011001111000101100 //Read at address in rbp with offset -89 to r12
01110000000000000101000000001101 //Set r13 to 5
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110000000000001000000000001100 //Set r12 to 8
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000001011011111000010001 //Write value in r1 to address in rbp with offset -91
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001011011111000100001 //Read at address in rbp with offset -91 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001011110111100001111 //Compute rsp - 94 and write result to rsp
11010000000001011100111001010001 //Write value in r5 to address in rbp with offset -92
11010000000001011101111001000001 //Write value in r4 to address in rbp with offset -93
11010000000001011110111000110001 //Write value in r3 to address in rbp with offset -94
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001011101111000100101 //Read at address in rbp with offset -93 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001011100111000101100 //Read at address in rbp with offset -92 to r12
01110000000000000101000000001101 //Set r13 to 5
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110000000000001100000000001100 //Set r12 to 12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001011110111000101100 //Read at address in rbp with offset -94 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001011110111000100101 //Read at address in rbp with offset -94 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001100001111100001111 //Compute rsp - 97 and write result to rsp
11010000000001011111111001010001 //Write value in r5 to address in rbp with offset -95
11010000000001100000111001000001 //Write value in r4 to address in rbp with offset -96
01110001000000110010000000000001 //Set r1 to 4146
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001100000111000101100 //Read at address in rbp with offset -96 to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100000111000100101 //Read at address in rbp with offset -96 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001011111111000101100 //Read at address in rbp with offset -95 to r12
01110000000000000101000000001101 //Set r13 to 5
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110000000000001000000000001100 //Set r12 to 8
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001100001111000010001 //Write value in r1 to address in rbp with offset -97
01110001000001011110000000000001 //Set r1 to 4190
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001100001111000101100 //Read at address in rbp with offset -97 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001100001111000010001 //Write value in r1 to address in rbp with offset -97
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001100001111000100001 //Read at address in rbp with offset -97 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001101001111100001111 //Compute rsp - 105 and write result to rsp
11010000000001100010111001010001 //Write value in r5 to address in rbp with offset -98
11010000000001100011111001000001 //Write value in r4 to address in rbp with offset -99
11010000000001100100111000110001 //Write value in r3 to address in rbp with offset -100
01110000000000000001000000000001 //Set r1 to 1
11100000000001100100111000101100 //Read at address in rbp with offset -100 to r12
01110000000000000000000000001101 //Set r13 to 0
01000000000000000010110011010000 //If r12 > r13, then jump to offset 2
10010000000000000010011101101100 //Jump to constant address 5046
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011110000010 //Jump to constant address 5057
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
11010000000001100101111011000001 //Write value in r12 to address in rbp with offset -101
01110000000000000001000000000001 //Set r1 to 1
11100000000001100101111000101100 //Read at address in rbp with offset -101 to r12
11100000000001100100111000101101 //Read at address in rbp with offset -100 to r13
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010011110010010 //Jump to constant address 5065
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100100000010 //Jump to constant address 5249
01110001001010111111000000000001 //Set r1 to 4799
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100010111000100101 //Read at address in rbp with offset -98 to r5
01110000000000000011000000000100 //Set r4 to 3
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010011110111000 //Jump to constant address 5084
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011111001110 //Jump to constant address 5095
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
11100000000001100100111000101100 //Read at address in rbp with offset -100 to r12
11100000000001100101111000101101 //Read at address in rbp with offset -101 to r13
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001100110111000010001 //Write value in r1 to address in rbp with offset -102
01110000000000000001000000000001 //Set r1 to 1
11100000000001100110111000101100 //Read at address in rbp with offset -102 to r12
01110000000100000000000000001101 //Set r13 to 256
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010011111100100 //Jump to constant address 5106
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010011111110000 //Jump to constant address 5112
01110000000100000000000000001100 //Set r12 to 256
11010000000001100110111011000001 //Write value in r12 to address in rbp with offset -102
01110001001101010010000000000001 //Set r1 to 4946
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100010111000100101 //Read at address in rbp with offset -98 to r5
01110000000000100000000000000100 //Set r4 to 32
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000001100111111000010001 //Write value in r1 to address in rbp with offset -103
01110000000000000000000000001100 //Set r12 to 0
11010000000001101000111011000001 //Write value in r12 to address in rbp with offset -104
01110000000000000001000000000001 //Set r1 to 1
11100000000001100111111000101100 //Read at address in rbp with offset -103 to r12
11100000000001100110111000101101 //Read at address in rbp with offset -102 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000010100000010100 //Jump to constant address 5130
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100010000010 //Jump to constant address 5185
11100000000001101000111000100001 //Read at address in rbp with offset -104 to r1
11100000000001101000111000101100 //Read at address in rbp with offset -104 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001101000111000010001 //Write value in r1 to address in rbp with offset -104
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001101010010000000000001 //Set r1 to 4946
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100010111000100101 //Read at address in rbp with offset -98 to r5
01110000000000100000000000000100 //Set r4 to 32
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000001100111111000010001 //Write value in r1 to address in rbp with offset -103
01110000000000000001000000000001 //Set r1 to 1
11100000000001101000111000101100 //Read at address in rbp with offset -104 to r12
01110000001111101000000000001101 //Set r13 to 1000
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010100001011000 //Jump to constant address 5164
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100010000000 //Jump to constant address 5184
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100010111000100101 //Read at address in rbp with offset -98 to r5
01110000000000001000000000000100 //Set r4 to 8
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10010000000000000010100000001000 //Jump to constant address 5124
01110001001101010010000000000001 //Set r1 to 4946
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100010111000100101 //Read at address in rbp with offset -98 to r5
01110000000000100100000000000100 //Set r4 to 36
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000001101001111000010001 //Write value in r1 to address in rbp with offset -105
01110001000001101100000000000001 //Set r1 to 4204
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100010111000101100 //Read at address in rbp with offset -98 to r12
01110000000000000101000000001101 //Set r13 to 5
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
01110000000000010100000000001100 //Set r12 to 20
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
11100000000001100101111000100011 //Read at address in rbp with offset -101 to r3
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11100000000001100011111000101100 //Read at address in rbp with offset -99 to r12
00000000000000000000000000111101 //Compute r0 OR r3 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11100000000001101001111000100101 //Read at address in rbp with offset -105 to r5
11100000000001100110111000100010 //Read at address in rbp with offset -102 to r2
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001101001111000101100 //Read at address in rbp with offset -105 to r12
11100000000001100110111000101101 //Read at address in rbp with offset -102 to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
01110001001100000101000000000001 //Set r1 to 4869
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100010111000100101 //Read at address in rbp with offset -98 to r5
01110000000000100100000000000100 //Set r4 to 36
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001100010111000100101 //Read at address in rbp with offset -98 to r5
01110000000000100000000000000100 //Set r4 to 32
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001100101111000101100 //Read at address in rbp with offset -101 to r12
11100000000001100110111000101101 //Read at address in rbp with offset -102 to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001100101111000010001 //Write value in r1 to address in rbp with offset -101
10010000000000000010011110000110 //Jump to constant address 5059
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001101101111100001111 //Compute rsp - 109 and write result to rsp
11010000000001101010111001010001 //Write value in r5 to address in rbp with offset -106
11010000000001101011111001000001 //Write value in r4 to address in rbp with offset -107
01110000101101110011000000000001 //Set r1 to 2931
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100100111000 //Jump to constant address 5276
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100101010010 //Jump to constant address 5289
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010010000110000000000101 //Set r5 to 1158
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001101100111011000001 //Write value in r12 to address in rbp with offset -108
01110000000000000001000000000001 //Set r1 to 1
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
11100000000001101011111000101101 //Read at address in rbp with offset -107 to r13
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000010100101100010 //Jump to constant address 5297
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010101000001010 //Jump to constant address 5381
11100000000001101011111000101100 //Read at address in rbp with offset -107 to r12
11100000000001101100111000101101 //Read at address in rbp with offset -108 to r13
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001101101111000010001 //Write value in r1 to address in rbp with offset -109
01110000000000000001000000000001 //Set r1 to 1
11100000000001101101111000101100 //Read at address in rbp with offset -109 to r12
01110000010000000000000000001101 //Set r13 to 1024
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010100110000000 //Jump to constant address 5312
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100110001100 //Jump to constant address 5318
01110000010000000000000000001100 //Set r12 to 1024
11010000000001101101111011000001 //Write value in r12 to address in rbp with offset -109
01110000101111010110000000000001 //Set r1 to 3030
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000101 //Set r5 to 18
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
11100000000001101101111000100100 //Read at address in rbp with offset -109 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100110101100 //Jump to constant address 5334
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100111000110 //Jump to constant address 5347
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110101011000000000101 //Set r5 to 1451
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001110101001000000000001 //Set r1 to 5033
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010010000000000100 //Set r4 to 18
01110000000000000000000100000100 //Set highest 16 bits of r4 to 0
11100000000001101010111000100101 //Read at address in rbp with offset -106 to r5
11100000000001101101111000100011 //Read at address in rbp with offset -109 to r3
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100111101000 //Jump to constant address 5364
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010100111111110 //Jump to constant address 5375
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
11100000000001101100111000101100 //Read at address in rbp with offset -108 to r12
11100000000001101101111000101101 //Read at address in rbp with offset -109 to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000001101100111000010001 //Write value in r1 to address in rbp with offset -108
10010000000000000010100101010110 //Jump to constant address 5291
01110000111001001110000000000001 //Set r1 to 3662
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001110000111100001111 //Compute rsp - 112 and write result to rsp
11010000000001101110111001010001 //Write value in r5 to address in rbp with offset -110
11010000000001101111111001000001 //Write value in r4 to address in rbp with offset -111
11010000000001110000111000110001 //Write value in r3 to address in rbp with offset -112
01110000000000000001000000000001 //Set r1 to 1
11100000000001110000111000101100 //Read at address in rbp with offset -112 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010101001000000 //Jump to constant address 5408
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010101001010110 //Jump to constant address 5419
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000001000000000001 //Set r1 to 1
11100000000001110000111000101100 //Read at address in rbp with offset -112 to r12
01110000010000000000000000001101 //Set r13 to 1024
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010101001100010 //Jump to constant address 5425
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010101001101110 //Jump to constant address 5431
01110000001111111110000000001100 //Set r12 to 1022
11010000000001110000111011000001 //Write value in r12 to address in rbp with offset -112
01110001001101010010000000000001 //Set r1 to 4946
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001101110111000100101 //Read at address in rbp with offset -110 to r5
01110000000000101000000000000100 //Set r4 to 40
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
01110001000101010000000000000001 //Set r1 to 4432
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001101110111000101100 //Read at address in rbp with offset -110 to r12
01110000000000000101000000001101 //Set r13 to 5
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
01110000000000011000000000001100 //Set r12 to 24
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000100 //Compute r0 OR r12 and write result to r4
11100000000001101111111000100011 //Read at address in rbp with offset -111 to r3
11100000000001110000111000100010 //Read at address in rbp with offset -112 to r2
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000001110000111000100001 //Read at address in rbp with offset -112 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000001101111111000101100 //Read at address in rbp with offset -111 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001110010111100001111 //Compute rsp - 114 and write result to rsp
11010000000001110001111001010001 //Write value in r5 to address in rbp with offset -113
11010000000001110010111001000001 //Write value in r4 to address in rbp with offset -114
01110000000000000001000000000001 //Set r1 to 1
11100000000001110010111000101100 //Read at address in rbp with offset -114 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000010101011100010 //Jump to constant address 5489
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010101100101010 //Jump to constant address 5525
01110001001101010010000000000001 //Set r1 to 4946
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110001111000100101 //Read at address in rbp with offset -113 to r5
01110000000000101000000000000100 //Set r4 to 40
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
11100000000001110010111000101101 //Read at address in rbp with offset -114 to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010011 //Compute r0 OR r1 and write result to r3
01110001001100000101000000000001 //Set r1 to 4869
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110001111000100101 //Read at address in rbp with offset -113 to r5
01110000000000101000000000000100 //Set r4 to 40
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110001111000100101 //Read at address in rbp with offset -113 to r5
01110000000001000000000000000100 //Set r4 to 64
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
01110000010011101010000000000100 //Set r4 to 1258
01110000000000000000000100000100 //Set highest 16 bits of r4 to 0
01110001001110101001000000000001 //Set r1 to 5033
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010000000000000000011 //Set r3 to 128
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000111010111100001111 //Compute rsp - 58 and write result to rsp
00000000000000000000000001011000 //Compute r0 OR r5 and write result to r8
00000000000000000000000001001001 //Compute r0 OR r4 and write result to r9
01110000000000000000000000000101 //Set r5 to 0
01110000000000000000000000000100 //Set r4 to 0
01110000000000000000000000000010 //Set r2 to 0
01110000000000000000000000000011 //Set r3 to 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010101101111110 //Jump to constant address 5567
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110001100010 //Jump to constant address 5681
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010101110010010 //Jump to constant address 5577
01110000000000000000000000000001 //Set r1 to 0
01110000000000000001000000001010 //Set r10 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010101111001000 //Jump to constant address 5604
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000010001100 //Compute r0 OR r8 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000011011 //Compute r0 OR r1 and write result to r11
11100000000000000000101100000001 //Read at address in r11 with offset 0 to r1
01110000000000000001000000001011 //Set r11 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000100000000000001101 //Set r13 to 32
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010101110111110 //Jump to constant address 5599
01110000000000000000000000001011 //Set r11 to 0
00000000000000000000000010111100 //Compute r0 OR r11 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010101111001000 //Jump to constant address 5604
10010000000000000010101111001010 //Jump to constant address 5605
01110000000000000000000000001010 //Set r10 to 0
00000000000000000000000010101100 //Compute r0 OR r10 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010101111010110 //Jump to constant address 5611
01110000000000000001000000000100 //Set r4 to 1
10010000000000000010110001010100 //Jump to constant address 5674
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010101111100010 //Jump to constant address 5617
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110001010010 //Jump to constant address 5673
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000010001100 //Compute r0 OR r8 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000011010 //Compute r0 OR r1 and write result to r10
11100000000000000000101000000001 //Read at address in r10 with offset 0 to r1
01110000000000000001000000001010 //Set r10 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000100000000000001101 //Set r13 to 32
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010110000001100 //Jump to constant address 5638
01110000000000000000000000001010 //Set r10 to 0
00000000000000000000000010101100 //Compute r0 OR r10 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110000011000 //Jump to constant address 5644
01110000000000000001000000000101 //Set r5 to 1
10010000000000000010110001010000 //Jump to constant address 5672
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000010001100 //Compute r0 OR r8 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11100000000000000000000100001010 //Read at address in r1 with offset 0 to r10
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000010011100 //Compute r0 OR r9 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000110100000 //Write value in r10 to address in r1 with offset 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010011 //Compute r0 OR r1 and write result to r3
00000000000000000000000000000000 //NOP to quickfix double labels
00000000000000000000000000000000 //NOP to quickfix double labels
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
10010000000000000010101101110010 //Jump to constant address 5561
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000010011100 //Compute r0 OR r9 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000001110110111100001111 //Compute rsp - 118 and write result to rsp
11010000000001110011111001010001 //Write value in r5 to address in rbp with offset -115
11010000000001110100111001000001 //Write value in r4 to address in rbp with offset -116
01110000000000000000000000001100 //Set r12 to 0
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000001110100111000101100 //Read at address in rbp with offset -116 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000101111000000001101 //Set r13 to 47
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010110010111010 //Jump to constant address 5725
01110000000000000000000000000010 //Set r2 to 0
01110000000000000001000000000011 //Set r3 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110011101110 //Jump to constant address 5751
01110000000000000001000000001100 //Set r12 to 1
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000001110100111000101100 //Read at address in rbp with offset -116 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010010 //Compute r0 OR r1 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010110011100100 //Jump to constant address 5746
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110011101110 //Jump to constant address 5751
10010000000000000010110011110000 //Jump to constant address 5752
01110000000000000000000000000011 //Set r3 to 0
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110100101100 //Jump to constant address 5782
01110000010001010001000000000100 //Set r4 to 1105
01110000000000000000000100000100 //Set highest 16 bits of r4 to 0
01110001001110101001000000000001 //Set r1 to 5033
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110011111000100101 //Read at address in rbp with offset -115 to r5
01110000000000110100000000000011 //Set r3 to 52
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110011111000100101 //Read at address in rbp with offset -115 to r5
01110000000000001000000000000100 //Set r4 to 8
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000001100 //Set r12 to 0
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110101110110 //Jump to constant address 5819
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010011000001000000000101 //Set r5 to 1217
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000001100 //Set r12 to 0
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000001110100111000101100 //Read at address in rbp with offset -116 to r12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110011000000000000101 //Set r5 to 1432
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000001110101111011000001 //Write value in r12 to address in rbp with offset -117
01110000111100111111000000000001 //Set r1 to 3903
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000001100 //Set r12 to 0
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
11100000000001110100111000101100 //Read at address in rbp with offset -116 to r12
00000000000000000000000001011101 //Compute r0 OR r5 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110110100100 //Jump to constant address 5842
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110110110000 //Jump to constant address 5848
01110000000110010100000000001100 //Set r12 to 404
11010000000001110101111011000001 //Write value in r12 to address in rbp with offset -117
01110000000000000001000000000001 //Set r1 to 1
11100000000001110101111000101100 //Read at address in rbp with offset -117 to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110110111100 //Jump to constant address 5854
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110111101100 //Jump to constant address 5878
01110000110110111101000000000001 //Set r1 to 3517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110111011110 //Jump to constant address 5871
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110111101010 //Jump to constant address 5877
01110000000110010100000000001100 //Set r12 to 404
11010000000001110101111011000001 //Write value in r12 to address in rbp with offset -117
00000000000000000000000000000000 //NOP to quickfix double labels
01110000000000000001000000000001 //Set r1 to 1
11100000000001110101111000101100 //Read at address in rbp with offset -117 to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010110111111000 //Jump to constant address 5884
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111000010000 //Jump to constant address 5896
01110000101100001110000000000001 //Set r1 to 2830
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000001110110111000010001 //Write value in r1 to address in rbp with offset -118
01110000000000000001000000000001 //Set r1 to 1
11100000000001110101111000101100 //Read at address in rbp with offset -117 to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111000011100 //Jump to constant address 5902
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111000111110 //Jump to constant address 5919
01110000000000000001000000000001 //Set r1 to 1
11100000000001110110111000101100 //Read at address in rbp with offset -118 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010111000110000 //Jump to constant address 5912
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111000111100 //Jump to constant address 5918
01110000000110010100000000001100 //Set r12 to 404
11010000000001110101111011000001 //Write value in r12 to address in rbp with offset -117
00000000000000000000000000000000 //NOP to quickfix double labels
01110000000000000001000000000001 //Set r1 to 1
11100000000001110101111000101100 //Read at address in rbp with offset -117 to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111001001010 //Jump to constant address 5925
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111001110100 //Jump to constant address 5946
11100000000001110110111000101100 //Read at address in rbp with offset -118 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010111001100110 //Jump to constant address 5939
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111001110010 //Jump to constant address 5945
01110000000110010100000000001100 //Set r12 to 404
11010000000001110101111011000001 //Write value in r12 to address in rbp with offset -117
00000000000000000000000000000000 //NOP to quickfix double labels
11100000000001110101111000101100 //Read at address in rbp with offset -117 to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111011111100 //Jump to constant address 6014
01110000010111000111000000000100 //Set r4 to 1479
01110000000000000000000100000100 //Set highest 16 bits of r4 to 0
01110001001110101001000000000001 //Set r1 to 5033
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110011111000100101 //Read at address in rbp with offset -115 to r5
01110000000001000010000000000011 //Set r3 to 66
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000111100111111000000000001 //Set r1 to 3903
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010000010010000000000101 //Set r5 to 1042
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000110110111101000000000001 //Set r1 to 3517
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111010111110 //Jump to constant address 5983
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111011011000 //Jump to constant address 5996
01110001010110011011000000000001 //Set r1 to 5531
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110011111000100101 //Read at address in rbp with offset -115 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000010111011111010 //Jump to constant address 6013
01110000101100001110000000000001 //Set r1 to 2830
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000001110110111000010001 //Write value in r1 to address in rbp with offset -118
01110001010010001000000000000001 //Set r1 to 5256
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110011111000100101 //Read at address in rbp with offset -115 to r5
11100000000001110110111000100100 //Read at address in rbp with offset -118 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000010111100100100 //Jump to constant address 6034
01110000010010011101000000000100 //Set r4 to 1181
01110000000000000000000100000100 //Set highest 16 bits of r4 to 0
01110001001110101001000000000001 //Set r1 to 5033
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110011111000100101 //Read at address in rbp with offset -115 to r5
01110000000000100011000000000011 //Set r3 to 35
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001010010001000000000000001 //Set r1 to 5256
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110011111000100101 //Read at address in rbp with offset -115 to r5
11100000000001110110111000100100 //Read at address in rbp with offset -118 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000001110011111000100101 //Read at address in rbp with offset -115 to r5
01110000000000001000000000000100 //Set r4 to 8
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010011111000111100001111 //Compute rsp - 1272 and write result to rsp
11010000010011110111111001010001 //Write value in r5 to address in rbp with offset -1271
01110001001101010010000000000001 //Set r1 to 4946
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010011110111111000100101 //Read at address in rbp with offset -1271 to r5
01110000000000100110000000000100 //Set r4 to 38
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000010011111000111000010001 //Write value in r1 to address in rbp with offset -1272
01110000000000000001000000000001 //Set r1 to 1
11100000010011111000111000101100 //Read at address in rbp with offset -1272 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000010111101101100 //Jump to constant address 6070
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111110010010 //Jump to constant address 6089
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010011110111111000100101 //Read at address in rbp with offset -1271 to r5
01110000000000001000000000000100 //Set r4 to 8
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110001010100010011000000000001 //Set r1 to 5395
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010001110110111000000100 //Compute rbp - 1142 and write result to r4
11100000010011110111111000100101 //Read at address in rbp with offset -1271 to r5
11100000010011111000111000100011 //Read at address in rbp with offset -1272 to r3
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000010111111100010 //Jump to constant address 6129
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010011010110000000000101 //Set r5 to 1238
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010001110110111000000101 //Compute rbp - 1142 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110000100000000000101 //Set r5 to 1412
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001010110101111000000000001 //Set r1 to 5551
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010001110101111000000101 //Compute rbp - 1141 and write result to r5
00001010010011110110111000000100 //Compute rbp - 1270 and write result to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001011001000111000000000001 //Set r1 to 5703
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010011110110111000000100 //Compute rbp - 1270 and write result to r4
11100000010011110111111000100101 //Read at address in rbp with offset -1271 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010100001010111100001111 //Compute rsp - 1290 and write result to rsp
01110000000011000000000000000001 //Set r1 to 192
11010000010011111100111000010001 //Write value in r1 to address in rbp with offset -1276
01110000000010101000000000000001 //Set r1 to 168
11010000010011111011111000010001 //Write value in r1 to address in rbp with offset -1275
01110000000000000000000000000001 //Set r1 to 0
11010000010011111010111000010001 //Write value in r1 to address in rbp with offset -1274
01110000000011010101000000000001 //Set r1 to 213
11010000010011111001111000010001 //Write value in r1 to address in rbp with offset -1273
01110000000011000000000000000001 //Set r1 to 192
11010000010100000000111000010001 //Write value in r1 to address in rbp with offset -1280
01110000000010101000000000000001 //Set r1 to 168
11010000010011111111111000010001 //Write value in r1 to address in rbp with offset -1279
01110000000000000000000000000001 //Set r1 to 0
11010000010011111110111000010001 //Write value in r1 to address in rbp with offset -1278
01110000000000000001000000000001 //Set r1 to 1
11010000010011111101111000010001 //Write value in r1 to address in rbp with offset -1277
01110000000011011110000000000001 //Set r1 to 222
11010000010100000110111000010001 //Write value in r1 to address in rbp with offset -1286
01110000000010101101000000000001 //Set r1 to 173
11010000010100000101111000010001 //Write value in r1 to address in rbp with offset -1285
01110000000010111110000000000001 //Set r1 to 190
11010000010100000100111000010001 //Write value in r1 to address in rbp with offset -1284
01110000000011101111000000000001 //Set r1 to 239
11010000010100000011111000010001 //Write value in r1 to address in rbp with offset -1283
01110000000000100100000000000001 //Set r1 to 36
11010000010100000010111000010001 //Write value in r1 to address in rbp with offset -1282
01110000000001100100000000000001 //Set r1 to 100
11010000010100000001111000010001 //Write value in r1 to address in rbp with offset -1281
01110000000011111111000000000001 //Set r1 to 255
11010000010100001010111000010001 //Write value in r1 to address in rbp with offset -1290
01110000000011111111000000000001 //Set r1 to 255
11010000010100001001111000010001 //Write value in r1 to address in rbp with offset -1289
01110000000011111111000000000001 //Set r1 to 255
11010000010100001000111000010001 //Write value in r1 to address in rbp with offset -1288
01110000000000000000000000000001 //Set r1 to 0
11010000010100000111111000010001 //Write value in r1 to address in rbp with offset -1287
01110001000001101100000000000001 //Set r1 to 4204
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010011111100111000000011 //Compute rbp - 1276 and write result to r3
01110000000000001111000000000101 //Set r5 to 15
01110000000000000100000000000100 //Set r4 to 4
01110000000000000100000000000010 //Set r2 to 4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001010000000000101 //Set r5 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001101100000000000001 //Set r1 to 4204
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010100000000111000000011 //Compute rbp - 1280 and write result to r3
01110000000000000001000000000101 //Set r5 to 1
01110000000000000100000000000100 //Set r4 to 4
01110000000000000100000000000010 //Set r2 to 4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001010000000000101 //Set r5 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001101100000000000001 //Set r1 to 4204
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010100000110111000000011 //Compute rbp - 1286 and write result to r3
01110000000000001001000000000101 //Set r5 to 9
01110000000000000100000000000100 //Set r4 to 4
01110000000000000110000000000010 //Set r2 to 6
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001010000000000101 //Set r5 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001000001101100000000000001 //Set r1 to 4204
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010100001010111000000011 //Compute rbp - 1290 and write result to r3
01110000000000000101000000000101 //Set r5 to 5
01110000000000000100000000000100 //Set r4 to 4
01110000000000000100000000000010 //Set r2 to 4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001010000000000101 //Set r5 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011000100010100 //Jump to constant address 6282
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010010010011000000000101 //Set r5 to 1171
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010100001011111100001111 //Compute rsp - 1291 and write result to rsp
11010000010100001011111001010001 //Write value in r5 to address in rbp with offset -1291
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001011111000100101 //Read at address in rbp with offset -1291 to r5
01110000000000010000000000000100 //Set r4 to 16
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001001111101000000000001 //Set r1 to 4733
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001011111000100101 //Read at address in rbp with offset -1291 to r5
01110000000000000010000000000100 //Set r4 to 2
01110000000011111111000000000011 //Set r3 to 255
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001001111101000000000001 //Set r1 to 4733
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001011111000100101 //Read at address in rbp with offset -1291 to r5
01110000000000000000000000000100 //Set r4 to 0
01110000000000000001000000000011 //Set r3 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001100000101000000000001 //Set r1 to 4869
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001011111000100101 //Read at address in rbp with offset -1291 to r5
01110000000000000100000000000100 //Set r4 to 4
01110000000001010000000000000011 //Set r3 to 80
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001011111000100101 //Read at address in rbp with offset -1291 to r5
01110000000000000001000000000100 //Set r4 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001000111100000000000001 //Set r1 to 4668
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001011111000100101 //Read at address in rbp with offset -1291 to r5
01110000000000000010000000000100 //Set r4 to 2
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011000110110110 //Jump to constant address 6363
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010000110100000000000101 //Set r5 to 1076
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010100001111111100001111 //Compute rsp - 1295 and write result to rsp
01110001000001001000000000000001 //Set r1 to 4168
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001100100000000000101 //Set r5 to 100
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000100111111000000000000001 //Set r1 to 2552
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000101001010000000000000001 //Set r1 to 2640
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100000001001000000000001 //Set r1 to 6153
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000010000000000101 //Set r5 to 2
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000011000000000101 //Set r5 to 3
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000100000000000101 //Set r5 to 4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000101000000000101 //Set r5 to 5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000110000000000101 //Set r5 to 6
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000111000000000101 //Set r5 to 7
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000001100 //Set r12 to 1
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011010000111000 //Jump to constant address 6684
01110000000000000000000000001100 //Set r12 to 0
11010000010100001110111011000001 //Write value in r12 to address in rbp with offset -1294
01110000000000000001000000000001 //Set r1 to 1
11100000010100001110111000101100 //Read at address in rbp with offset -1294 to r12
01110000000000001000000000001101 //Set r13 to 8
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000011001010101010 //Jump to constant address 6485
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011010000100110 //Jump to constant address 6675
01110000000000000000000000001100 //Set r12 to 0
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011001011101010 //Jump to constant address 6517
01110000011000100101000000000101 //Set r5 to 1573
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
01110000011011010010000000000001 //Set r1 to 1746
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000110000000000001100 //Set r12 to 48
11100000010100001110111000101101 //Read at address in rbp with offset -1294 to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000010100001101111000010001 //Write value in r1 to address in rbp with offset -1293
01110000000000000000000000001100 //Set r12 to 0
11010000010100001100111011000001 //Write value in r12 to address in rbp with offset -1292
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010010100001101111000000101 //Compute rbp - 1293 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001001010111111000000000001 //Set r1 to 4799
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001110111000100101 //Read at address in rbp with offset -1294 to r5
01110000000000000011000000000100 //Set r4 to 3
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000010100001111111000010001 //Write value in r1 to address in rbp with offset -1295
01110000000000000001000000000001 //Set r1 to 1
11100000010100001111111000101100 //Read at address in rbp with offset -1295 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000011001100001010 //Jump to constant address 6533
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011001100111110 //Jump to constant address 6559
01110000000000000000000000001100 //Set r12 to 0
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011001100101100 //Jump to constant address 6550
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000011000001010000000000101 //Set r5 to 1546
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001110111000100101 //Read at address in rbp with offset -1294 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000011010000010110 //Jump to constant address 6667
01110000000000000001000000000001 //Set r1 to 1
11100000010100001111111000101100 //Read at address in rbp with offset -1295 to r12
01110000000000010111000000001101 //Set r13 to 23
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000011001101001010 //Jump to constant address 6565
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011001110001110 //Jump to constant address 6599
01110000000000000000000000001100 //Set r12 to 0
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011001101101100 //Jump to constant address 6582
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010001000010000000000101 //Set r5 to 1090
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001011110100001000000000001 //Set r1 to 6049
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001110111000100101 //Read at address in rbp with offset -1294 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001110111000100101 //Read at address in rbp with offset -1294 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000011010000010100 //Jump to constant address 6666
01110000000000000001000000000001 //Set r1 to 1
11100000010100001111111000101100 //Read at address in rbp with offset -1295 to r12
01110000000000010100000000001101 //Set r13 to 20
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000011001110011010 //Jump to constant address 6605
01110000000000000000000000000001 //Set r1 to 0
01110000000000000000000000000011 //Set r3 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000011001110111010 //Jump to constant address 6621
01110000000000000001000000000001 //Set r1 to 1
11100000010100001111111000101100 //Read at address in rbp with offset -1295 to r12
01110000000000010101000000001101 //Set r13 to 21
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000011001110110000 //Jump to constant address 6616
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000011001110111010 //Jump to constant address 6621
10010000000000000011001110111100 //Jump to constant address 6622
01110000000000000001000000000011 //Set r3 to 1
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000111100 //Compute r0 OR r3 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000011001111011100 //Jump to constant address 6638
01110000000000000001000000000001 //Set r1 to 1
11100000010100001111111000101100 //Read at address in rbp with offset -1295 to r12
01110000000000010110000000001101 //Set r13 to 22
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000011001111010010 //Jump to constant address 6633
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01100000000000000010000011000000 //If r0 == r12, then jump to offset 2
10010000000000000011001111011100 //Jump to constant address 6638
10010000000000000011001111011110 //Jump to constant address 6639
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011001111101000 //Jump to constant address 6644
10010000000000000011010000010010 //Jump to constant address 6665
01110000000000000000000000001100 //Set r12 to 0
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000011010000000010 //Jump to constant address 6657
01110000011011110101000000000001 //Set r1 to 1781
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000010110110110000000000101 //Set r5 to 1462
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110001100010010000000000000001 //Set r1 to 6288
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000010100001110111000100101 //Read at address in rbp with offset -1294 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000000000 //NOP to quickfix double labels
00000000000000000000000000000000 //NOP to quickfix double labels
00000000000000000000000000000000 //NOP to quickfix double labels
11100000010100001110111000100001 //Read at address in rbp with offset -1294 to r1
11100000010100001110111000101100 //Read at address in rbp with offset -1294 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000010100001110111000010001 //Write value in r1 to address in rbp with offset -1294
10010000000000000011001010011110 //Jump to constant address 6479
01110000100000011011000000000001 //Set r1 to 2075
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001010000000000101 //Set r5 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000011001010010010 //Jump to constant address 6473
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010100001101111100001111 //Compute rsp - 1293 and write result to rsp
01110000000000000000000000000001 //Set r1 to 0
01110000000001001100000100000001 //Set highest 16 bits of r1 to 76
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010100001101111100001111 //Compute rsp - 1293 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010100001101111100001111 //Compute rsp - 1293 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010010100001101111100001111 //Compute rsp - 1293 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001101010101100000000000001 //Set r1 to 6828
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000011010001000110 //Jump to constant address 6691
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001101010101100000000000001 //Set r1 to 6828
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000011010001100100 //Jump to constant address 6706
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001101010101100000000000001 //Set r1 to 6828
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000011010001111000 //Jump to constant address 6716
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110001101010101100000000000001 //Set r1 to 6828
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000011010010001100 //Jump to constant address 6726
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
