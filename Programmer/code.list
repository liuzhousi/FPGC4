10010000000000000000000000001100 //Jump to constant address 6
10010000000000000000111001100110 //Jump to constant address 1843
10010000000000000000111010010100 //Jump to constant address 1866
10010000000000000000111011000010 //Jump to constant address 1889
10010000000000000000111011110000 //Jump to constant address 1912
00000000000000000000011110100000 //Length of program
01110000000000000000000000001111 //Set rsp to 0
01110000000001110000000100001111 //Set highest 16 bits of rsp to 112
01110000000000001110000000000001 //Set r1 to 14
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000110010010010 //Jump to constant address 1609
11111111111111111111111111111111 //Halt
01110010011000101110000000000010 //Set r2 to 9774
01110000000011000000000100000010 //Set highest 16 bits of r2 to 192
11010000000000000000001000010000 //Write value in r1 to address in r2 with offset 0
11111111111111111111111111111111 //Halt
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000000000 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000101111 //data
00000000000000000000000000000000 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000101101 //data
00000000000000000000000000000000 //data
00000000000000000000000000001010 //data
00000000000000000000000000000000 //data
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000000010100010 //Jump to constant address 81
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000010111000 //Jump to constant address 92
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000000000000000000000000001 //Set r1 to 0
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000000011000110 //Jump to constant address 99
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000011100000 //Jump to constant address 112
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
10010000000000000000000010111010 //Jump to constant address 93
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000000100000000 //Jump to constant address 128
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000100010110 //Jump to constant address 139
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00000000000000000000000000000000 //NOP to quickfix double labels
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
01000000000000000010110111000000 //If r13 > r12, then jump to offset 2
10010000000000000000000100100100 //Jump to constant address 146
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000100110110 //Jump to constant address 155
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000001001101 //Compute r0 OR r4 and write result to r13
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
10010000000000000000000100011000 //Jump to constant address 140
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000010 //Set r2 to 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000000000000000000000000111101 //Compute r0 OR r3 and write result to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000000101011010 //Jump to constant address 173
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000110011010 //Jump to constant address 205
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11100000000000000000000100001000 //Read at address in r1 with offset 0 to r8
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000110000000 //Write value in r8 to address in r1 with offset 0
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
10010000000000000000000101001110 //Jump to constant address 167
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000001 //Set r1 to 9774
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011000101110000000000011 //Set r3 to 9774
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
00000000000000000000000000100001 //Compute r0 OR r2 and write result to r1
01110000000000000001000000000100 //Set r4 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01100000000000000010110111000000 //If r13 == r12, then jump to offset 2
10010000000000000000000111100000 //Jump to constant address 240
01110000000000000000000000000100 //Set r4 to 0
00000000000000000000000001001100 //Compute r0 OR r4 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000000111111100 //Jump to constant address 254
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
00000000000000000000000001010001 //Compute r0 OR r5 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
10010000000000000000000111010010 //Jump to constant address 233
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000011100001000000000001 //Set r1 to 225
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000011100001000000000001 //Set r1 to 225
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001000101000000000101 //Set r5 to 69
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000100111100001111 //Compute rsp - 4 and write result to rsp
11010000000000000001111001010001 //Write value in r5 to address in rbp with offset -1
11010000000000000010111001000001 //Write value in r4 to address in rbp with offset -2
01110000000001110110000000000001 //Set r1 to 118
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
01110000000000001010000000000100 //Set r4 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000011111000010001 //Write value in r1 to address in rbp with offset -3
01110000000000000000000000001100 //Set r12 to 0
11010000000000000100111011000001 //Write value in r12 to address in rbp with offset -4
01110000000001000111000000000001 //Set r1 to 71
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
01110000000000001010000000000100 //Set r4 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000001111000010001 //Write value in r1 to address in rbp with offset -1
01110000000000000001000000000001 //Set r1 to 1
11100000000000000001111000101100 //Read at address in rbp with offset -1 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000001010000000 //Jump to constant address 320
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000001010100100 //Jump to constant address 338
01110000000100011110000000000001 //Set r1 to 286
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000001111000100101 //Read at address in rbp with offset -1 to r5
11100000000000000010111000100100 //Read at address in rbp with offset -2 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000000100111000010001 //Write value in r1 to address in rbp with offset -4
11100000000000000011111000101100 //Read at address in rbp with offset -3 to r12
01110000000000110000000000001101 //Set r13 to 48
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000000000100111000100001 //Read at address in rbp with offset -4 to r1
11100000000000000100111000101100 //Read at address in rbp with offset -4 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11010000000000000100111000110001 //Write value in r3 to address in rbp with offset -4
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000010111000101100 //Read at address in rbp with offset -2 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000000100111000100001 //Read at address in rbp with offset -4 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000101111100001111 //Compute rsp - 5 and write result to rsp
11010000000000000101111001000001 //Write value in r4 to address in rbp with offset -5
01110000000100011110000000000001 //Set r1 to 286
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000101111000100100 //Read at address in rbp with offset -5 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000101111000101100 //Read at address in rbp with offset -5 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001001111100001111 //Compute rsp - 9 and write result to rsp
11010000000000000110111001010001 //Write value in r5 to address in rbp with offset -6
11010000000000000111111001000001 //Write value in r4 to address in rbp with offset -7
01110000000001110110000000000001 //Set r1 to 118
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
01110000000000010000000000000100 //Set r4 to 16
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000001000111000010001 //Write value in r1 to address in rbp with offset -8
01110000000000000000000000001100 //Set r12 to 0
11010000000000001001111011000001 //Write value in r12 to address in rbp with offset -9
01110000000001000111000000000001 //Set r1 to 71
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
01110000000000010000000000000100 //Set r4 to 16
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000000110111000010001 //Write value in r1 to address in rbp with offset -6
01110000000000000001000000000001 //Set r1 to 1
11100000000000000110111000101100 //Read at address in rbp with offset -6 to r12
01110000000000000000000000001101 //Set r13 to 0
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000001101011010 //Jump to constant address 429
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000001101111110 //Jump to constant address 447
01110000000110001011000000000001 //Set r1 to 395
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000000110111000100101 //Read at address in rbp with offset -6 to r5
11100000000000000111111000100100 //Read at address in rbp with offset -7 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000001001111000101100 //Read at address in rbp with offset -9 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001001111000010001 //Write value in r1 to address in rbp with offset -9
01110000000000000001000000000001 //Set r1 to 1
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000000001001000000001101 //Set r13 to 9
00110000000000000010110111000000 //If r13 >= r12, then jump to offset 2
10010000000000000000001110001010 //Jump to constant address 453
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000001110100100 //Jump to constant address 466
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000001000001000000001101 //Set r13 to 65
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000001010000000001101 //Set r13 to 10
00000010000000000000110011011100 //Compute r12 - r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
10010000000000000000001110101100 //Jump to constant address 470
11100000000000001000111000101100 //Read at address in rbp with offset -8 to r12
01110000000000110000000000001101 //Set r13 to 48
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000010 //Compute r0 OR r12 and write result to r2
11100000000000001001111000100001 //Read at address in rbp with offset -9 to r1
11100000000000001001111000101100 //Read at address in rbp with offset -9 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000011 //Compute r0 OR r12 and write result to r3
11010000000000001001111000110001 //Write value in r3 to address in rbp with offset -9
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000000111111000101100 //Read at address in rbp with offset -7 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000100100000 //Write value in r2 to address in r1 with offset 0
11100000000000001001111000100001 //Read at address in rbp with offset -9 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000001010111100001111 //Compute rsp - 10 and write result to rsp
11010000000000001010111001000001 //Write value in r4 to address in rbp with offset -10
01110000000000000000000000001100 //Set r12 to 0
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000110000000000001100 //Set r12 to 48
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000000000000001000000001100 //Set r12 to 1
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000001111000000000001100 //Set r12 to 120
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000000000000010000000001100 //Set r12 to 2
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000001010111000010001 //Write value in r1 to address in rbp with offset -10
01110000000110001011000000000001 //Set r1 to 395
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000001010111000100100 //Read at address in rbp with offset -10 to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11100000000000001010111000101100 //Read at address in rbp with offset -10 to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000000000000000000000000011 //Set r3 to 0
01110000000001001100000100000011 //Set highest 16 bits of r3 to 76
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
01110000000000000000000000001100 //Set r12 to 0
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110010011000100110000000000001 //Set r1 to 9766
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
01110010011000100111000000000001 //Set r1 to 9767
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000000110001 //Compute r0 OR r3 and write result to r1
11100000000000000000000100000010 //Read at address in r1 with offset 0 to r2
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000010010001000 //Jump to constant address 580
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000010010010010 //Jump to constant address 585
10010000000000000000010001111000 //Jump to constant address 572
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01111111101111111111000000000010 //Set r2 to 0b1111101111111111
00000000100000000000000100100001 //Compute r1 AND r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
01110010011000110000000000000011 //Set r3 to 9776
01110000000011000000000100000011 //Set highest 16 bits of r3 to 192
11100000000000000000001100000001 //Read at address in r3 with offset 0 to r1
01110000010000000000000000000010 //Set r2 to 0b10000000000
00000000000000000000000100100001 //Compute r1 OR r2 and write result to r1
11010000000000000000001100010000 //Write value in r1 to address in r3 with offset 0
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110010011100110101000000000001 //Set r1 to 10037
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
11010000000000000000000101010000 //Write value in r5 to address in r1 with offset 0
11100000000000000000000100000001 //Read at address in r1 with offset 0 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000000000111100001111 //Compute rsp - 0 and write result to rsp
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110010011100110110000000000001 //Set r1 to 10038
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001010000000000101 //Set r5 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001100110000000000101 //Set r5 to 102
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010011001000000000101 //Set r5 to 153
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001100110000000000101 //Set r5 to 102
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010011001000000000101 //Set r5 to 153
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010110111100001111 //Compute rsp - 22 and write result to rsp
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000010010000000000000101 //Set r5 to 144
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000010101111000010001 //Write value in r1 to address in rbp with offset -21
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000010110111000010001 //Write value in r1 to address in rbp with offset -22
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000111101101000000000001 //Set r1 to 493
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000010100111000000100 //Compute rbp - 20 and write result to r4
11100000000000010101111000100101 //Read at address in rbp with offset -21 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000100000100000000000001 //Set r1 to 260
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000010100111000000101 //Compute rbp - 20 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000111101101000000000001 //Set r1 to 493
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000010100111000000100 //Compute rbp - 20 and write result to r4
11100000000000010110111000100101 //Read at address in rbp with offset -22 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000100000100000000000001 //Set r1 to 260
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000010100111000000101 //Compute rbp - 20 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011011111100001111 //Compute rsp - 27 and write result to rsp
11010000000000010111111001010001 //Write value in r5 to address in rbp with offset -23
11010000000000011000111001000001 //Write value in r4 to address in rbp with offset -24
11010000000000011001111000110001 //Write value in r3 to address in rbp with offset -25
11010000000000011010111000100001 //Write value in r2 to address in rbp with offset -26
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000011000000000101 //Set r5 to 3
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011000111000100101 //Read at address in rbp with offset -24 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011001111000100101 //Read at address in rbp with offset -25 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011010111000100101 //Read at address in rbp with offset -26 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000000011011111011000001 //Write value in r12 to address in rbp with offset -27
01110000000000000001000000000001 //Set r1 to 1
11100000000000011011111000101100 //Read at address in rbp with offset -27 to r12
11100000000000010111111000101101 //Read at address in rbp with offset -23 to r13
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000011110000100 //Jump to constant address 962
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000011110111010 //Jump to constant address 989
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000011010011000000000010 //Set r2 to 211
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
00000000000000000000000000101101 //Compute r0 OR r2 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000011011111000100001 //Read at address in rbp with offset -27 to r1
11100000000000011011111000101100 //Read at address in rbp with offset -27 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000011011111000010001 //Write value in r1 to address in rbp with offset -27
10010000000000000000011101111000 //Jump to constant address 956
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000011101111100001111 //Compute rsp - 29 and write result to rsp
11010000000000011100111001010001 //Write value in r5 to address in rbp with offset -28
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
01110000000000000010000000001101 //Set r13 to 2
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000011111111000 //Jump to constant address 1020
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100000010010 //Jump to constant address 1033
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110101000000000101 //Set r5 to 53
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000000100001001010 //Jump to constant address 1061
01110000000000000001000000000001 //Set r1 to 1
11100000000000011100111000101100 //Read at address in rbp with offset -28 to r12
01110000000000000011000000001101 //Set r13 to 3
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000100000011110 //Jump to constant address 1039
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100000111000 //Jump to constant address 1052
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000010101000000000101 //Set r5 to 21
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000000100001001000 //Jump to constant address 1060
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000101000000000101 //Set r5 to 5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000000000 //NOP to quickfix double labels
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000000000000000101 //Set r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11010000000000011101111000010001 //Write value in r1 to address in rbp with offset -29
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000011101111000100001 //Read at address in rbp with offset -29 to r1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010100111100001111 //Compute rsp - 20 and write result to rsp
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000110000000000101 //Set r5 to 6
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000001010000000000101 //Set r5 to 10
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010100111100001111 //Compute rsp - 20 and write result to rsp
01110000010000111100000000000001 //Set r1 to 1084
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001111101010000000000001 //Set r1 to 1002
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000010000000001101 //Set r13 to 2
00000000100000000000110011011100 //Compute r12 AND r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000100100000010 //Jump to constant address 1153
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100100011000 //Jump to constant address 1164
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000011000111000000000101 //Set r5 to 199
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000000100000000000110011011100 //Compute r12 AND r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000100101011010 //Jump to constant address 1197
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100110000100 //Jump to constant address 1218
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001111101010000000000001 //Set r1 to 1002
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000000100101000110 //Jump to constant address 1187
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000100000111100001111 //Compute rsp - 32 and write result to rsp
11010000000000011110111001010001 //Write value in r5 to address in rbp with offset -30
11010000000000011111111001000001 //Write value in r4 to address in rbp with offset -31
11010000000000100000111000110001 //Write value in r3 to address in rbp with offset -32
01110000010000111100000000000001 //Set r1 to 1084
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001111101010000000000001 //Set r1 to 1002
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000010000000001101 //Set r13 to 2
00000000100000000000110011011100 //Compute r12 AND r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000100111010010 //Jump to constant address 1257
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000100111101000 //Jump to constant address 1268
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001010010000000000101 //Set r5 to 82
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011110111000100101 //Read at address in rbp with offset -30 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000011111111000100101 //Read at address in rbp with offset -31 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100000111000100101 //Read at address in rbp with offset -32 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000000100000000000110011011100 //Compute r12 AND r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000101001011010 //Jump to constant address 1325
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101010000100 //Jump to constant address 1346
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001111101010000000000001 //Set r1 to 1002
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000000101001000110 //Jump to constant address 1315
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000100100111100001111 //Compute rsp - 36 and write result to rsp
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000010000000000001101 //Set r13 to 16
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100001111000010001 //Write value in r1 to address in rbp with offset -33
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00000011000000000000110011011100 //Compute r12 >> r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100010111000010001 //Write value in r1 to address in rbp with offset -34
11010000000000100011111001010001 //Write value in r5 to address in rbp with offset -35
01110000010000111100000000000001 //Set r1 to 1084
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001111101010000000000001 //Set r1 to 1002
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000010000000001101 //Set r13 to 2
00000000100000000000110011011100 //Compute r12 AND r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000101011100010 //Jump to constant address 1393
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101011111000 //Jump to constant address 1404
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
01110000001001001111000000000001 //Set r1 to 591
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000010000000000101 //Set r5 to 2
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100001111000100101 //Read at address in rbp with offset -33 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100010111000100101 //Read at address in rbp with offset -34 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
11100000000000100011111000100101 //Read at address in rbp with offset -35 to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000000000000001100 //Set r12 to 0
11010000000000100100111011000001 //Write value in r12 to address in rbp with offset -36
01110000000000000001000000000001 //Set r1 to 1
11100000000000100100111000101100 //Read at address in rbp with offset -36 to r12
01110000000100000000000000001101 //Set r13 to 256
00110000000000000010110011010000 //If r12 >= r13, then jump to offset 2
10010000000000000000101101010110 //Jump to constant address 1451
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101101111100 //Jump to constant address 1470
01110000001001111011000000000001 //Set r1 to 635
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001000001000000000101 //Set r5 to 65
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
11100000000000100100111000100001 //Read at address in rbp with offset -36 to r1
11100000000000100100111000101100 //Read at address in rbp with offset -36 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
11010000000000100100111000010001 //Write value in r1 to address in rbp with offset -36
10010000000000000000101101001010 //Jump to constant address 1445
01110000001001100101000000000001 //Set r1 to 613
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000000100000000000110011011100 //Compute r12 AND r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
01110000000000000001000000000010 //Set r2 to 1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000101110100000 //Jump to constant address 1488
01110000000000000000000000000010 //Set r2 to 0
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101111001010 //Jump to constant address 1509
01110000001000101010000000000001 //Set r1 to 554
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001111101010000000000001 //Set r1 to 1002
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000000001000000000101 //Set r5 to 1
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000000101110001100 //Jump to constant address 1478
01110000000000000001000000000001 //Set r1 to 1
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000010100111100001111 //Compute rsp - 20 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100001100 //Read at address in r7 with offset 0 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000101111110000 //Jump to constant address 1528
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000101111111000 //Jump to constant address 1532
01110000000000000001000000000001 //Set r1 to 1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100001100 //Read at address in r7 with offset 0 to r12
01110000000001110010000000001101 //Set r13 to 114
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110000001000 //Jump to constant address 1540
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110001100110 //Jump to constant address 1587
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000001011100000101 //Read at address in r7 with offset 1 to r5
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
01110000000000010000000000001101 //Set r13 to 16
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000101 //Compute r0 OR r12 and write result to r5
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000010011100000001 //Read at address in r7 with offset 2 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000001000000000001101 //Set r13 to 8
00000010100000000000110011011100 //Compute r12 << r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000011011100000001 //Read at address in r7 with offset 3 to r1
00000000000000000000000001011100 //Compute r0 OR r5 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000100011100000100 //Read at address in r7 with offset 4 to r4
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000101011100000011 //Read at address in r7 with offset 5 to r3
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000110011100000010 //Read at address in r7 with offset 6 to r2
01110000001110001011000000000001 //Set r1 to 907
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000000000001000000000001 //Set r1 to 1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100001100 //Read at address in r7 with offset 0 to r12
01110000000001100101000000001101 //Set r13 to 101
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110001110110 //Jump to constant address 1595
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110001111110 //Jump to constant address 1599
01110000000000000000000000001100 //Set r12 to 0
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000000011111000000 //Write value in r12 to address in r7 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101110111100001111 //Compute rsp - 46 and write result to rsp
01110000001010001001000000000001 //Set r1 to 649
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000001100011111000000000001 //Set r1 to 799
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000100000100000000000001 //Set r1 to 260
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001000001000000000101 //Set r5 to 65
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000010101001001000000000001 //Set r1 to 1353
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000100000000000000000000101 //Set r5 to 2048
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
00000000000000000000000000010101 //Compute r0 OR r1 and write result to r5
01110000000111101101000000000001 //Set r1 to 493
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000101110111000000100 //Compute rbp - 46 and write result to r4
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000100000100000000000001 //Set r1 to 260
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000101110111000000101 //Compute rbp - 46 and write result to r5
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000100000100000000000001 //Set r1 to 260
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000000110100000000000101 //Set r5 to 52
01110000000000000000000100000101 //Set highest 16 bits of r5 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000011010011000000000001 //Set r1 to 211
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
01110000000001000000000000000101 //Set r5 to 64
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
01110000000001110010000000001100 //Set r12 to 114
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000000011111000000 //Write value in r12 to address in r7 with offset 0
01110000000000000000000000001100 //Set r12 to 0
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000001011111000000 //Write value in r12 to address in r7 with offset 1
01110000000000100000000000001100 //Set r12 to 32
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000010011111000000 //Write value in r12 to address in r7 with offset 2
01110000000000000000000000001100 //Set r12 to 0
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000011011111000000 //Write value in r12 to address in r7 with offset 3
01110000000000000000000000001100 //Set r12 to 0
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000100011111000000 //Write value in r12 to address in r7 with offset 4
01110000000000000000000000001100 //Set r12 to 0
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000101011111000000 //Write value in r12 to address in r7 with offset 5
01110000000000000000000000001100 //Set r12 to 0
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000110011111000000 //Write value in r12 to address in r7 with offset 6
01110000000000001010000000001100 //Set r12 to 10
01110000000000010100000000000111 //Set r7 to 20
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000111011111000000 //Write value in r12 to address in r7 with offset 7
01110000000001110010000000001100 //Set r12 to 114
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000000011111000000 //Write value in r12 to address in r7 with offset 0
01110000000000000001000000001100 //Set r12 to 1
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000110101111100 //Jump to constant address 1726
01110000010111101100000000000001 //Set r1 to 1516
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00100000000000000000000000001100 //Save PC to r12
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111000000 //Write value in r12 to address in rsp with offset 0
10000000000000000000000011010000 //Jump to reg r13 with offset 0
10010000000000000000110101100100 //Jump to constant address 1714
01110000000000110000000000000001 //Set r1 to 48
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101110111100001111 //Compute rsp - 46 and write result to rsp
01110000000000000000000000000001 //Set r1 to 0
01110000000001001100000100000001 //Set highest 16 bits of r1 to 76
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
01110000000000000001000000001100 //Set r12 to 1
11010000000000000000000111000000 //Write value in r12 to address in r1 with offset 0
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101110111100001111 //Compute rsp - 46 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101110111100001111 //Compute rsp - 46 and write result to rsp
01110000000000000001000000000001 //Set r1 to 1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100001100 //Read at address in r7 with offset 0 to r12
01110000000000000000000000001101 //Set r13 to 0
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000110111010100 //Jump to constant address 1770
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111001000110 //Jump to constant address 1827
01110010011000101111000000000001 //Set r1 to 9775
01110000000011000000000100000001 //Set highest 16 bits of r1 to 192
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11100000000000000000000100000011 //Read at address in r1 with offset 0 to r3
01110000000000010100000000000010 //Set r2 to 20
01110000000000000000000100000010 //Set highest 16 bits of r2 to 0
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100000001 //Read at address in r7 with offset 0 to r1
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
01110000000000000001000000001101 //Set r13 to 1
00000011100000000000110011011100 //Compute r12 * r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000101100 //Compute r0 OR r2 and write result to r12
00000000000000000000000000011101 //Compute r0 OR r1 and write result to r13
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
00000000000000000000000000010001 //Compute r0 OR r1 and write result to r1
11010000000000000000000100110000 //Write value in r3 to address in r1 with offset 0
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100000001 //Read at address in r7 with offset 0 to r1
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100001100 //Read at address in r7 with offset 0 to r12
01110000000000000001000000001101 //Set r13 to 1
00000001100000000000110011011100 //Compute r12 + r13 and write result to r12
00000000000000000000000011000001 //Compute r0 OR r12 and write result to r1
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000000011100010000 //Write value in r1 to address in r7 with offset 0
01110000000000000001000000000001 //Set r1 to 1
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11100000000000000000011100001100 //Read at address in r7 with offset 0 to r12
01110000000000001000000000001101 //Set r13 to 8
01010000000000000010110111000000 //If r13 != r12, then jump to offset 2
10010000000000000000111000101010 //Jump to constant address 1813
01110000000000000000000000000001 //Set r1 to 0
00000000000000000000000000011100 //Compute r0 OR r1 and write result to r12
00001010000000000000110000001100 //Compute r12 - 0 and write result to r12
01010000000000000010000011000000 //If r0 != r12, then jump to offset 2
10010000000000000000111001000100 //Jump to constant address 1826
00000000000000000000000000100010 //Compute r0 OR r2 and write result to r2
11100000000000000000001000000001 //Read at address in r2 with offset 0 to r1
01110000000000010011000000000111 //Set r7 to 19
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000000011100010000 //Write value in r1 to address in r7 with offset 0
01110000000000000000000000001100 //Set r12 to 0
01110000000000010010000000000111 //Set r7 to 18
01110000000000000000000100000111 //Set highest 16 bits of r7 to 0
11010000000000000000011111000000 //Write value in r12 to address in r7 with offset 0
00000000000000000000000000000000 //NOP to quickfix double labels
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
00001010000000000001111100001111 //Compute rsp - 1 and write result to rsp
11010000000000000000111111100000 //Write value in rbp to address in rsp with offset 0
00000000000000000000000011111110 //Compute r0 OR rsp and write result to rbp
00001010000000101110111100001111 //Compute rsp - 46 and write result to rsp
00000000000000000000000011101111 //Compute r0 OR rbp and write result to rsp
11100000000000000000111100001110 //Read at address in rsp with offset 0 to rbp
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
11100000000000000000111100001100 //Read at address in rsp with offset 0 to r12
00001001100000000001111100001111 //Compute rsp + 1 and write result to rsp
10000000000000000100000011000000 //Jump to reg r12 with offset 4
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000011110001111000000000001 //Set r1 to 1935
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000110110001010 //Jump to constant address 1733
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000011110001111000000000001 //Set r1 to 1935
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000110110101000 //Jump to constant address 1748
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000011110001111000000000001 //Set r1 to 1935
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000110110111100 //Jump to constant address 1758
11111111111111111111111111111111 //Halt
10110000000000000000000000010000 //Push r1 to stack
10110000000000000000000000100000 //Push r2 to stack
10110000000000000000000000110000 //Push r3 to stack
10110000000000000000000001000000 //Push r4 to stack
10110000000000000000000001010000 //Push r5 to stack
10110000000000000000000001100000 //Push r6 to stack
10110000000000000000000001110000 //Push r7 to stack
10110000000000000000000010000000 //Push r8 to stack
10110000000000000000000010010000 //Push r9 to stack
10110000000000000000000010100000 //Push r10 to stack
10110000000000000000000010110000 //Push r11 to stack
10110000000000000000000011000000 //Push r12 to stack
10110000000000000000000011010000 //Push r13 to stack
10110000000000000000000011100000 //Push rbp to stack
10110000000000000000000011110000 //Push rsp to stack
01110000000000000000000000001111 //Set rsp to 0
01110000000001111011000100001111 //Set highest 16 bits of rsp to 123
01110000011110001111000000000001 //Set r1 to 1935
01110000000000000000000100000001 //Set highest 16 bits of r1 to 0
00001010000000000100000100000001 //Compute r1 - 4 and write result to r1
11010000000000000000111100010000 //Write value in r1 to address in rsp with offset 0
10010000000000000000111001010010 //Jump to constant address 1833
11111111111111111111111111111111 //Halt
10100000000000000000000000001111 //Pop from stack to rsp
10100000000000000000000000001110 //Pop from stack to rbp
10100000000000000000000000001101 //Pop from stack to r13
10100000000000000000000000001100 //Pop from stack to r12
10100000000000000000000000001011 //Pop from stack to r11
10100000000000000000000000001010 //Pop from stack to r10
10100000000000000000000000001001 //Pop from stack to r9
10100000000000000000000000001000 //Pop from stack to r8
10100000000000000000000000000111 //Pop from stack to r7
10100000000000000000000000000110 //Pop from stack to r6
10100000000000000000000000000101 //Pop from stack to r5
10100000000000000000000000000100 //Pop from stack to r4
10100000000000000000000000000011 //Pop from stack to r3
10100000000000000000000000000010 //Pop from stack to r2
10100000000000000000000000000001 //Pop from stack to r1
00010000000000000000000000000000 //Return from interrupt
11111111111111111111111111111111 //Halt
